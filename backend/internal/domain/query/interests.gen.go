// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/m_app/internal/domain/model"
)

func newInterest(db *gorm.DB, opts ...gen.DOOption) interest {
	_interest := interest{}

	_interest.interestDo.UseDB(db, opts...)
	_interest.interestDo.UseModel(&model.Interest{})

	tableName := _interest.interestDo.TableName()
	_interest.ALL = field.NewAsterisk(tableName)
	_interest.ID = field.NewInt32(tableName, "id")
	_interest.Name = field.NewString(tableName, "name")
	_interest.DisplayName = field.NewString(tableName, "display_name")
	_interest.CategoryID = field.NewInt32(tableName, "category_id")
	_interest.IconURL = field.NewString(tableName, "icon_url")
	_interest.SortOrder = field.NewInt32(tableName, "sort_order")
	_interest.CreatedAt = field.NewTime(tableName, "created_at")
	_interest.UpdatedAt = field.NewTime(tableName, "updated_at")
	_interest.DeletedAt = field.NewField(tableName, "deleted_at")

	_interest.fillFieldMap()

	return _interest
}

type interest struct {
	interestDo

	ALL         field.Asterisk
	ID          field.Int32
	Name        field.String
	DisplayName field.String
	CategoryID  field.Int32
	IconURL     field.String
	SortOrder   field.Int32
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (i interest) Table(newTableName string) *interest {
	i.interestDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i interest) As(alias string) *interest {
	i.interestDo.DO = *(i.interestDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *interest) updateTableName(table string) *interest {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt32(table, "id")
	i.Name = field.NewString(table, "name")
	i.DisplayName = field.NewString(table, "display_name")
	i.CategoryID = field.NewInt32(table, "category_id")
	i.IconURL = field.NewString(table, "icon_url")
	i.SortOrder = field.NewInt32(table, "sort_order")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")

	i.fillFieldMap()

	return i
}

func (i *interest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *interest) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 9)
	i.fieldMap["id"] = i.ID
	i.fieldMap["name"] = i.Name
	i.fieldMap["display_name"] = i.DisplayName
	i.fieldMap["category_id"] = i.CategoryID
	i.fieldMap["icon_url"] = i.IconURL
	i.fieldMap["sort_order"] = i.SortOrder
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
}

func (i interest) clone(db *gorm.DB) interest {
	i.interestDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i interest) replaceDB(db *gorm.DB) interest {
	i.interestDo.ReplaceDB(db)
	return i
}

type interestDo struct{ gen.DO }

type IInterestDo interface {
	gen.SubQuery
	Debug() IInterestDo
	WithContext(ctx context.Context) IInterestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInterestDo
	WriteDB() IInterestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInterestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInterestDo
	Not(conds ...gen.Condition) IInterestDo
	Or(conds ...gen.Condition) IInterestDo
	Select(conds ...field.Expr) IInterestDo
	Where(conds ...gen.Condition) IInterestDo
	Order(conds ...field.Expr) IInterestDo
	Distinct(cols ...field.Expr) IInterestDo
	Omit(cols ...field.Expr) IInterestDo
	Join(table schema.Tabler, on ...field.Expr) IInterestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInterestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInterestDo
	Group(cols ...field.Expr) IInterestDo
	Having(conds ...gen.Condition) IInterestDo
	Limit(limit int) IInterestDo
	Offset(offset int) IInterestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInterestDo
	Unscoped() IInterestDo
	Create(values ...*model.Interest) error
	CreateInBatches(values []*model.Interest, batchSize int) error
	Save(values ...*model.Interest) error
	First() (*model.Interest, error)
	Take() (*model.Interest, error)
	Last() (*model.Interest, error)
	Find() ([]*model.Interest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Interest, err error)
	FindInBatches(result *[]*model.Interest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Interest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInterestDo
	Assign(attrs ...field.AssignExpr) IInterestDo
	Joins(fields ...field.RelationField) IInterestDo
	Preload(fields ...field.RelationField) IInterestDo
	FirstOrInit() (*model.Interest, error)
	FirstOrCreate() (*model.Interest, error)
	FindByPage(offset int, limit int) (result []*model.Interest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInterestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i interestDo) Debug() IInterestDo {
	return i.withDO(i.DO.Debug())
}

func (i interestDo) WithContext(ctx context.Context) IInterestDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i interestDo) ReadDB() IInterestDo {
	return i.Clauses(dbresolver.Read)
}

func (i interestDo) WriteDB() IInterestDo {
	return i.Clauses(dbresolver.Write)
}

func (i interestDo) Session(config *gorm.Session) IInterestDo {
	return i.withDO(i.DO.Session(config))
}

func (i interestDo) Clauses(conds ...clause.Expression) IInterestDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i interestDo) Returning(value interface{}, columns ...string) IInterestDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i interestDo) Not(conds ...gen.Condition) IInterestDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i interestDo) Or(conds ...gen.Condition) IInterestDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i interestDo) Select(conds ...field.Expr) IInterestDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i interestDo) Where(conds ...gen.Condition) IInterestDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i interestDo) Order(conds ...field.Expr) IInterestDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i interestDo) Distinct(cols ...field.Expr) IInterestDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i interestDo) Omit(cols ...field.Expr) IInterestDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i interestDo) Join(table schema.Tabler, on ...field.Expr) IInterestDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i interestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInterestDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i interestDo) RightJoin(table schema.Tabler, on ...field.Expr) IInterestDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i interestDo) Group(cols ...field.Expr) IInterestDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i interestDo) Having(conds ...gen.Condition) IInterestDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i interestDo) Limit(limit int) IInterestDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i interestDo) Offset(offset int) IInterestDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i interestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInterestDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i interestDo) Unscoped() IInterestDo {
	return i.withDO(i.DO.Unscoped())
}

func (i interestDo) Create(values ...*model.Interest) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i interestDo) CreateInBatches(values []*model.Interest, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i interestDo) Save(values ...*model.Interest) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i interestDo) First() (*model.Interest, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Interest), nil
	}
}

func (i interestDo) Take() (*model.Interest, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Interest), nil
	}
}

func (i interestDo) Last() (*model.Interest, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Interest), nil
	}
}

func (i interestDo) Find() ([]*model.Interest, error) {
	result, err := i.DO.Find()
	return result.([]*model.Interest), err
}

func (i interestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Interest, err error) {
	buf := make([]*model.Interest, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i interestDo) FindInBatches(result *[]*model.Interest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i interestDo) Attrs(attrs ...field.AssignExpr) IInterestDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i interestDo) Assign(attrs ...field.AssignExpr) IInterestDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i interestDo) Joins(fields ...field.RelationField) IInterestDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i interestDo) Preload(fields ...field.RelationField) IInterestDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i interestDo) FirstOrInit() (*model.Interest, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Interest), nil
	}
}

func (i interestDo) FirstOrCreate() (*model.Interest, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Interest), nil
	}
}

func (i interestDo) FindByPage(offset int, limit int) (result []*model.Interest, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i interestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i interestDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i interestDo) Delete(models ...*model.Interest) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *interestDo) withDO(do gen.Dao) *interestDo {
	i.DO = *do.(*gen.DO)
	return i
}
