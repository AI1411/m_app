// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/m_app/internal/domain/model"
)

func newCommunityPost(db *gorm.DB, opts ...gen.DOOption) communityPost {
	_communityPost := communityPost{}

	_communityPost.communityPostDo.UseDB(db, opts...)
	_communityPost.communityPostDo.UseModel(&model.CommunityPost{})

	tableName := _communityPost.communityPostDo.TableName()
	_communityPost.ALL = field.NewAsterisk(tableName)
	_communityPost.ID = field.NewString(tableName, "id")
	_communityPost.CommunityID = field.NewString(tableName, "community_id")
	_communityPost.UserID = field.NewString(tableName, "user_id")
	_communityPost.Title = field.NewString(tableName, "title")
	_communityPost.Content = field.NewString(tableName, "content")
	_communityPost.MediaUrls = field.NewString(tableName, "media_urls")
	_communityPost.LikeCount = field.NewInt32(tableName, "like_count")
	_communityPost.CommentCount = field.NewInt32(tableName, "comment_count")
	_communityPost.IsPinned = field.NewBool(tableName, "is_pinned")
	_communityPost.IsApproved = field.NewBool(tableName, "is_approved")
	_communityPost.CreatedAt = field.NewTime(tableName, "created_at")
	_communityPost.UpdatedAt = field.NewTime(tableName, "updated_at")
	_communityPost.DeletedAt = field.NewField(tableName, "deleted_at")

	_communityPost.fillFieldMap()

	return _communityPost
}

type communityPost struct {
	communityPostDo

	ALL          field.Asterisk
	ID           field.String // 投稿ID
	CommunityID  field.String // コミュニティID
	UserID       field.String // 投稿者のユーザーID
	Title        field.String // 投稿タイトル（オプション）
	Content      field.String // 投稿内容
	MediaUrls    field.String // 添付メディアのURL配列（画像や動画）
	LikeCount    field.Int32  // いいね数（キャッシュ）
	CommentCount field.Int32  // コメント数（キャッシュ）
	IsPinned     field.Bool   // ピン留め投稿フラグ
	IsApproved   field.Bool   // 承認済みフラグ（モデレーション用）
	CreatedAt    field.Time   // 投稿作成日時
	UpdatedAt    field.Time   // 投稿更新日時
	DeletedAt    field.Field  // 論理削除日時

	fieldMap map[string]field.Expr
}

func (c communityPost) Table(newTableName string) *communityPost {
	c.communityPostDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c communityPost) As(alias string) *communityPost {
	c.communityPostDo.DO = *(c.communityPostDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *communityPost) updateTableName(table string) *communityPost {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.CommunityID = field.NewString(table, "community_id")
	c.UserID = field.NewString(table, "user_id")
	c.Title = field.NewString(table, "title")
	c.Content = field.NewString(table, "content")
	c.MediaUrls = field.NewString(table, "media_urls")
	c.LikeCount = field.NewInt32(table, "like_count")
	c.CommentCount = field.NewInt32(table, "comment_count")
	c.IsPinned = field.NewBool(table, "is_pinned")
	c.IsApproved = field.NewBool(table, "is_approved")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *communityPost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *communityPost) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 13)
	c.fieldMap["id"] = c.ID
	c.fieldMap["community_id"] = c.CommunityID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["title"] = c.Title
	c.fieldMap["content"] = c.Content
	c.fieldMap["media_urls"] = c.MediaUrls
	c.fieldMap["like_count"] = c.LikeCount
	c.fieldMap["comment_count"] = c.CommentCount
	c.fieldMap["is_pinned"] = c.IsPinned
	c.fieldMap["is_approved"] = c.IsApproved
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c communityPost) clone(db *gorm.DB) communityPost {
	c.communityPostDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c communityPost) replaceDB(db *gorm.DB) communityPost {
	c.communityPostDo.ReplaceDB(db)
	return c
}

type communityPostDo struct{ gen.DO }

type ICommunityPostDo interface {
	gen.SubQuery
	Debug() ICommunityPostDo
	WithContext(ctx context.Context) ICommunityPostDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommunityPostDo
	WriteDB() ICommunityPostDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommunityPostDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommunityPostDo
	Not(conds ...gen.Condition) ICommunityPostDo
	Or(conds ...gen.Condition) ICommunityPostDo
	Select(conds ...field.Expr) ICommunityPostDo
	Where(conds ...gen.Condition) ICommunityPostDo
	Order(conds ...field.Expr) ICommunityPostDo
	Distinct(cols ...field.Expr) ICommunityPostDo
	Omit(cols ...field.Expr) ICommunityPostDo
	Join(table schema.Tabler, on ...field.Expr) ICommunityPostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommunityPostDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommunityPostDo
	Group(cols ...field.Expr) ICommunityPostDo
	Having(conds ...gen.Condition) ICommunityPostDo
	Limit(limit int) ICommunityPostDo
	Offset(offset int) ICommunityPostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunityPostDo
	Unscoped() ICommunityPostDo
	Create(values ...*model.CommunityPost) error
	CreateInBatches(values []*model.CommunityPost, batchSize int) error
	Save(values ...*model.CommunityPost) error
	First() (*model.CommunityPost, error)
	Take() (*model.CommunityPost, error)
	Last() (*model.CommunityPost, error)
	Find() ([]*model.CommunityPost, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommunityPost, err error)
	FindInBatches(result *[]*model.CommunityPost, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CommunityPost) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommunityPostDo
	Assign(attrs ...field.AssignExpr) ICommunityPostDo
	Joins(fields ...field.RelationField) ICommunityPostDo
	Preload(fields ...field.RelationField) ICommunityPostDo
	FirstOrInit() (*model.CommunityPost, error)
	FirstOrCreate() (*model.CommunityPost, error)
	FindByPage(offset int, limit int) (result []*model.CommunityPost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommunityPostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c communityPostDo) Debug() ICommunityPostDo {
	return c.withDO(c.DO.Debug())
}

func (c communityPostDo) WithContext(ctx context.Context) ICommunityPostDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c communityPostDo) ReadDB() ICommunityPostDo {
	return c.Clauses(dbresolver.Read)
}

func (c communityPostDo) WriteDB() ICommunityPostDo {
	return c.Clauses(dbresolver.Write)
}

func (c communityPostDo) Session(config *gorm.Session) ICommunityPostDo {
	return c.withDO(c.DO.Session(config))
}

func (c communityPostDo) Clauses(conds ...clause.Expression) ICommunityPostDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c communityPostDo) Returning(value interface{}, columns ...string) ICommunityPostDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c communityPostDo) Not(conds ...gen.Condition) ICommunityPostDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c communityPostDo) Or(conds ...gen.Condition) ICommunityPostDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c communityPostDo) Select(conds ...field.Expr) ICommunityPostDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c communityPostDo) Where(conds ...gen.Condition) ICommunityPostDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c communityPostDo) Order(conds ...field.Expr) ICommunityPostDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c communityPostDo) Distinct(cols ...field.Expr) ICommunityPostDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c communityPostDo) Omit(cols ...field.Expr) ICommunityPostDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c communityPostDo) Join(table schema.Tabler, on ...field.Expr) ICommunityPostDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c communityPostDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommunityPostDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c communityPostDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommunityPostDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c communityPostDo) Group(cols ...field.Expr) ICommunityPostDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c communityPostDo) Having(conds ...gen.Condition) ICommunityPostDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c communityPostDo) Limit(limit int) ICommunityPostDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c communityPostDo) Offset(offset int) ICommunityPostDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c communityPostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunityPostDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c communityPostDo) Unscoped() ICommunityPostDo {
	return c.withDO(c.DO.Unscoped())
}

func (c communityPostDo) Create(values ...*model.CommunityPost) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c communityPostDo) CreateInBatches(values []*model.CommunityPost, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c communityPostDo) Save(values ...*model.CommunityPost) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c communityPostDo) First() (*model.CommunityPost, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityPost), nil
	}
}

func (c communityPostDo) Take() (*model.CommunityPost, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityPost), nil
	}
}

func (c communityPostDo) Last() (*model.CommunityPost, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityPost), nil
	}
}

func (c communityPostDo) Find() ([]*model.CommunityPost, error) {
	result, err := c.DO.Find()
	return result.([]*model.CommunityPost), err
}

func (c communityPostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommunityPost, err error) {
	buf := make([]*model.CommunityPost, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c communityPostDo) FindInBatches(result *[]*model.CommunityPost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c communityPostDo) Attrs(attrs ...field.AssignExpr) ICommunityPostDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c communityPostDo) Assign(attrs ...field.AssignExpr) ICommunityPostDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c communityPostDo) Joins(fields ...field.RelationField) ICommunityPostDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c communityPostDo) Preload(fields ...field.RelationField) ICommunityPostDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c communityPostDo) FirstOrInit() (*model.CommunityPost, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityPost), nil
	}
}

func (c communityPostDo) FirstOrCreate() (*model.CommunityPost, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityPost), nil
	}
}

func (c communityPostDo) FindByPage(offset int, limit int) (result []*model.CommunityPost, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c communityPostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c communityPostDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c communityPostDo) Delete(models ...*model.CommunityPost) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *communityPostDo) withDO(do gen.Dao) *communityPostDo {
	c.DO = *do.(*gen.DO)
	return c
}
