// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/m_app/internal/domain/model"
)

func newBlocklist(db *gorm.DB, opts ...gen.DOOption) blocklist {
	_blocklist := blocklist{}

	_blocklist.blocklistDo.UseDB(db, opts...)
	_blocklist.blocklistDo.UseModel(&model.Blocklist{})

	tableName := _blocklist.blocklistDo.TableName()
	_blocklist.ALL = field.NewAsterisk(tableName)
	_blocklist.ID = field.NewInt64(tableName, "id")
	_blocklist.BlockerUserID = field.NewString(tableName, "blocker_user_id")
	_blocklist.BlockedUserID = field.NewString(tableName, "blocked_user_id")
	_blocklist.CreatedAt = field.NewTime(tableName, "created_at")
	_blocklist.User = blocklistBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
	}

	_blocklist.BlockedUser = blocklistBelongsToBlockedUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("BlockedUser", "model.User"),
	}

	_blocklist.fillFieldMap()

	return _blocklist
}

type blocklist struct {
	blocklistDo

	ALL           field.Asterisk
	ID            field.Int64
	BlockerUserID field.String
	BlockedUserID field.String
	CreatedAt     field.Time
	User          blocklistBelongsToUser

	BlockedUser blocklistBelongsToBlockedUser

	fieldMap map[string]field.Expr
}

func (b blocklist) Table(newTableName string) *blocklist {
	b.blocklistDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b blocklist) As(alias string) *blocklist {
	b.blocklistDo.DO = *(b.blocklistDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *blocklist) updateTableName(table string) *blocklist {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.BlockerUserID = field.NewString(table, "blocker_user_id")
	b.BlockedUserID = field.NewString(table, "blocked_user_id")
	b.CreatedAt = field.NewTime(table, "created_at")

	b.fillFieldMap()

	return b
}

func (b *blocklist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *blocklist) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 6)
	b.fieldMap["id"] = b.ID
	b.fieldMap["blocker_user_id"] = b.BlockerUserID
	b.fieldMap["blocked_user_id"] = b.BlockedUserID
	b.fieldMap["created_at"] = b.CreatedAt

}

func (b blocklist) clone(db *gorm.DB) blocklist {
	b.blocklistDo.ReplaceConnPool(db.Statement.ConnPool)
	b.User.db = db.Session(&gorm.Session{Initialized: true})
	b.User.db.Statement.ConnPool = db.Statement.ConnPool
	b.BlockedUser.db = db.Session(&gorm.Session{Initialized: true})
	b.BlockedUser.db.Statement.ConnPool = db.Statement.ConnPool
	return b
}

func (b blocklist) replaceDB(db *gorm.DB) blocklist {
	b.blocklistDo.ReplaceDB(db)
	b.User.db = db.Session(&gorm.Session{})
	b.BlockedUser.db = db.Session(&gorm.Session{})
	return b
}

type blocklistBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a blocklistBelongsToUser) Where(conds ...field.Expr) *blocklistBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a blocklistBelongsToUser) WithContext(ctx context.Context) *blocklistBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a blocklistBelongsToUser) Session(session *gorm.Session) *blocklistBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a blocklistBelongsToUser) Model(m *model.Blocklist) *blocklistBelongsToUserTx {
	return &blocklistBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a blocklistBelongsToUser) Unscoped() *blocklistBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type blocklistBelongsToUserTx struct{ tx *gorm.Association }

func (a blocklistBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a blocklistBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a blocklistBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a blocklistBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a blocklistBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a blocklistBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a blocklistBelongsToUserTx) Unscoped() *blocklistBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type blocklistBelongsToBlockedUser struct {
	db *gorm.DB

	field.RelationField
}

func (a blocklistBelongsToBlockedUser) Where(conds ...field.Expr) *blocklistBelongsToBlockedUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a blocklistBelongsToBlockedUser) WithContext(ctx context.Context) *blocklistBelongsToBlockedUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a blocklistBelongsToBlockedUser) Session(session *gorm.Session) *blocklistBelongsToBlockedUser {
	a.db = a.db.Session(session)
	return &a
}

func (a blocklistBelongsToBlockedUser) Model(m *model.Blocklist) *blocklistBelongsToBlockedUserTx {
	return &blocklistBelongsToBlockedUserTx{a.db.Model(m).Association(a.Name())}
}

func (a blocklistBelongsToBlockedUser) Unscoped() *blocklistBelongsToBlockedUser {
	a.db = a.db.Unscoped()
	return &a
}

type blocklistBelongsToBlockedUserTx struct{ tx *gorm.Association }

func (a blocklistBelongsToBlockedUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a blocklistBelongsToBlockedUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a blocklistBelongsToBlockedUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a blocklistBelongsToBlockedUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a blocklistBelongsToBlockedUserTx) Clear() error {
	return a.tx.Clear()
}

func (a blocklistBelongsToBlockedUserTx) Count() int64 {
	return a.tx.Count()
}

func (a blocklistBelongsToBlockedUserTx) Unscoped() *blocklistBelongsToBlockedUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type blocklistDo struct{ gen.DO }

type IBlocklistDo interface {
	gen.SubQuery
	Debug() IBlocklistDo
	WithContext(ctx context.Context) IBlocklistDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBlocklistDo
	WriteDB() IBlocklistDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBlocklistDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBlocklistDo
	Not(conds ...gen.Condition) IBlocklistDo
	Or(conds ...gen.Condition) IBlocklistDo
	Select(conds ...field.Expr) IBlocklistDo
	Where(conds ...gen.Condition) IBlocklistDo
	Order(conds ...field.Expr) IBlocklistDo
	Distinct(cols ...field.Expr) IBlocklistDo
	Omit(cols ...field.Expr) IBlocklistDo
	Join(table schema.Tabler, on ...field.Expr) IBlocklistDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBlocklistDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBlocklistDo
	Group(cols ...field.Expr) IBlocklistDo
	Having(conds ...gen.Condition) IBlocklistDo
	Limit(limit int) IBlocklistDo
	Offset(offset int) IBlocklistDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBlocklistDo
	Unscoped() IBlocklistDo
	Create(values ...*model.Blocklist) error
	CreateInBatches(values []*model.Blocklist, batchSize int) error
	Save(values ...*model.Blocklist) error
	First() (*model.Blocklist, error)
	Take() (*model.Blocklist, error)
	Last() (*model.Blocklist, error)
	Find() ([]*model.Blocklist, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Blocklist, err error)
	FindInBatches(result *[]*model.Blocklist, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Blocklist) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBlocklistDo
	Assign(attrs ...field.AssignExpr) IBlocklistDo
	Joins(fields ...field.RelationField) IBlocklistDo
	Preload(fields ...field.RelationField) IBlocklistDo
	FirstOrInit() (*model.Blocklist, error)
	FirstOrCreate() (*model.Blocklist, error)
	FindByPage(offset int, limit int) (result []*model.Blocklist, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBlocklistDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b blocklistDo) Debug() IBlocklistDo {
	return b.withDO(b.DO.Debug())
}

func (b blocklistDo) WithContext(ctx context.Context) IBlocklistDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b blocklistDo) ReadDB() IBlocklistDo {
	return b.Clauses(dbresolver.Read)
}

func (b blocklistDo) WriteDB() IBlocklistDo {
	return b.Clauses(dbresolver.Write)
}

func (b blocklistDo) Session(config *gorm.Session) IBlocklistDo {
	return b.withDO(b.DO.Session(config))
}

func (b blocklistDo) Clauses(conds ...clause.Expression) IBlocklistDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b blocklistDo) Returning(value interface{}, columns ...string) IBlocklistDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b blocklistDo) Not(conds ...gen.Condition) IBlocklistDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b blocklistDo) Or(conds ...gen.Condition) IBlocklistDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b blocklistDo) Select(conds ...field.Expr) IBlocklistDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b blocklistDo) Where(conds ...gen.Condition) IBlocklistDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b blocklistDo) Order(conds ...field.Expr) IBlocklistDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b blocklistDo) Distinct(cols ...field.Expr) IBlocklistDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b blocklistDo) Omit(cols ...field.Expr) IBlocklistDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b blocklistDo) Join(table schema.Tabler, on ...field.Expr) IBlocklistDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b blocklistDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBlocklistDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b blocklistDo) RightJoin(table schema.Tabler, on ...field.Expr) IBlocklistDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b blocklistDo) Group(cols ...field.Expr) IBlocklistDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b blocklistDo) Having(conds ...gen.Condition) IBlocklistDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b blocklistDo) Limit(limit int) IBlocklistDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b blocklistDo) Offset(offset int) IBlocklistDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b blocklistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBlocklistDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b blocklistDo) Unscoped() IBlocklistDo {
	return b.withDO(b.DO.Unscoped())
}

func (b blocklistDo) Create(values ...*model.Blocklist) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b blocklistDo) CreateInBatches(values []*model.Blocklist, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b blocklistDo) Save(values ...*model.Blocklist) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b blocklistDo) First() (*model.Blocklist, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Blocklist), nil
	}
}

func (b blocklistDo) Take() (*model.Blocklist, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Blocklist), nil
	}
}

func (b blocklistDo) Last() (*model.Blocklist, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Blocklist), nil
	}
}

func (b blocklistDo) Find() ([]*model.Blocklist, error) {
	result, err := b.DO.Find()
	return result.([]*model.Blocklist), err
}

func (b blocklistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Blocklist, err error) {
	buf := make([]*model.Blocklist, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b blocklistDo) FindInBatches(result *[]*model.Blocklist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b blocklistDo) Attrs(attrs ...field.AssignExpr) IBlocklistDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b blocklistDo) Assign(attrs ...field.AssignExpr) IBlocklistDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b blocklistDo) Joins(fields ...field.RelationField) IBlocklistDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b blocklistDo) Preload(fields ...field.RelationField) IBlocklistDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b blocklistDo) FirstOrInit() (*model.Blocklist, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Blocklist), nil
	}
}

func (b blocklistDo) FirstOrCreate() (*model.Blocklist, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Blocklist), nil
	}
}

func (b blocklistDo) FindByPage(offset int, limit int) (result []*model.Blocklist, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b blocklistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b blocklistDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b blocklistDo) Delete(models ...*model.Blocklist) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *blocklistDo) withDO(do gen.Dao) *blocklistDo {
	b.DO = *do.(*gen.DO)
	return b
}
