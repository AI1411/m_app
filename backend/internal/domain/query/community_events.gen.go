// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/m_app/internal/domain/model"
)

func newCommunityEvent(db *gorm.DB, opts ...gen.DOOption) communityEvent {
	_communityEvent := communityEvent{}

	_communityEvent.communityEventDo.UseDB(db, opts...)
	_communityEvent.communityEventDo.UseModel(&model.CommunityEvent{})

	tableName := _communityEvent.communityEventDo.TableName()
	_communityEvent.ALL = field.NewAsterisk(tableName)
	_communityEvent.ID = field.NewString(tableName, "id")
	_communityEvent.CommunityID = field.NewString(tableName, "community_id")
	_communityEvent.CreatorID = field.NewString(tableName, "creator_id")
	_communityEvent.Title = field.NewString(tableName, "title")
	_communityEvent.Description = field.NewString(tableName, "description")
	_communityEvent.Location = field.NewString(tableName, "location")
	_communityEvent.IsOnline = field.NewBool(tableName, "is_online")
	_communityEvent.StartTime = field.NewTime(tableName, "start_time")
	_communityEvent.EndTime = field.NewTime(tableName, "end_time")
	_communityEvent.MaxAttendees = field.NewInt32(tableName, "max_attendees")
	_communityEvent.ImageURL = field.NewString(tableName, "image_url")
	_communityEvent.CreatedAt = field.NewTime(tableName, "created_at")
	_communityEvent.UpdatedAt = field.NewTime(tableName, "updated_at")
	_communityEvent.DeletedAt = field.NewField(tableName, "deleted_at")

	_communityEvent.fillFieldMap()

	return _communityEvent
}

type communityEvent struct {
	communityEventDo

	ALL          field.Asterisk
	ID           field.String
	CommunityID  field.String
	CreatorID    field.String
	Title        field.String
	Description  field.String
	Location     field.String
	IsOnline     field.Bool
	StartTime    field.Time
	EndTime      field.Time
	MaxAttendees field.Int32
	ImageURL     field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (c communityEvent) Table(newTableName string) *communityEvent {
	c.communityEventDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c communityEvent) As(alias string) *communityEvent {
	c.communityEventDo.DO = *(c.communityEventDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *communityEvent) updateTableName(table string) *communityEvent {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.CommunityID = field.NewString(table, "community_id")
	c.CreatorID = field.NewString(table, "creator_id")
	c.Title = field.NewString(table, "title")
	c.Description = field.NewString(table, "description")
	c.Location = field.NewString(table, "location")
	c.IsOnline = field.NewBool(table, "is_online")
	c.StartTime = field.NewTime(table, "start_time")
	c.EndTime = field.NewTime(table, "end_time")
	c.MaxAttendees = field.NewInt32(table, "max_attendees")
	c.ImageURL = field.NewString(table, "image_url")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *communityEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *communityEvent) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 14)
	c.fieldMap["id"] = c.ID
	c.fieldMap["community_id"] = c.CommunityID
	c.fieldMap["creator_id"] = c.CreatorID
	c.fieldMap["title"] = c.Title
	c.fieldMap["description"] = c.Description
	c.fieldMap["location"] = c.Location
	c.fieldMap["is_online"] = c.IsOnline
	c.fieldMap["start_time"] = c.StartTime
	c.fieldMap["end_time"] = c.EndTime
	c.fieldMap["max_attendees"] = c.MaxAttendees
	c.fieldMap["image_url"] = c.ImageURL
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c communityEvent) clone(db *gorm.DB) communityEvent {
	c.communityEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c communityEvent) replaceDB(db *gorm.DB) communityEvent {
	c.communityEventDo.ReplaceDB(db)
	return c
}

type communityEventDo struct{ gen.DO }

type ICommunityEventDo interface {
	gen.SubQuery
	Debug() ICommunityEventDo
	WithContext(ctx context.Context) ICommunityEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommunityEventDo
	WriteDB() ICommunityEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommunityEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommunityEventDo
	Not(conds ...gen.Condition) ICommunityEventDo
	Or(conds ...gen.Condition) ICommunityEventDo
	Select(conds ...field.Expr) ICommunityEventDo
	Where(conds ...gen.Condition) ICommunityEventDo
	Order(conds ...field.Expr) ICommunityEventDo
	Distinct(cols ...field.Expr) ICommunityEventDo
	Omit(cols ...field.Expr) ICommunityEventDo
	Join(table schema.Tabler, on ...field.Expr) ICommunityEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommunityEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommunityEventDo
	Group(cols ...field.Expr) ICommunityEventDo
	Having(conds ...gen.Condition) ICommunityEventDo
	Limit(limit int) ICommunityEventDo
	Offset(offset int) ICommunityEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunityEventDo
	Unscoped() ICommunityEventDo
	Create(values ...*model.CommunityEvent) error
	CreateInBatches(values []*model.CommunityEvent, batchSize int) error
	Save(values ...*model.CommunityEvent) error
	First() (*model.CommunityEvent, error)
	Take() (*model.CommunityEvent, error)
	Last() (*model.CommunityEvent, error)
	Find() ([]*model.CommunityEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommunityEvent, err error)
	FindInBatches(result *[]*model.CommunityEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CommunityEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommunityEventDo
	Assign(attrs ...field.AssignExpr) ICommunityEventDo
	Joins(fields ...field.RelationField) ICommunityEventDo
	Preload(fields ...field.RelationField) ICommunityEventDo
	FirstOrInit() (*model.CommunityEvent, error)
	FirstOrCreate() (*model.CommunityEvent, error)
	FindByPage(offset int, limit int) (result []*model.CommunityEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommunityEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c communityEventDo) Debug() ICommunityEventDo {
	return c.withDO(c.DO.Debug())
}

func (c communityEventDo) WithContext(ctx context.Context) ICommunityEventDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c communityEventDo) ReadDB() ICommunityEventDo {
	return c.Clauses(dbresolver.Read)
}

func (c communityEventDo) WriteDB() ICommunityEventDo {
	return c.Clauses(dbresolver.Write)
}

func (c communityEventDo) Session(config *gorm.Session) ICommunityEventDo {
	return c.withDO(c.DO.Session(config))
}

func (c communityEventDo) Clauses(conds ...clause.Expression) ICommunityEventDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c communityEventDo) Returning(value interface{}, columns ...string) ICommunityEventDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c communityEventDo) Not(conds ...gen.Condition) ICommunityEventDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c communityEventDo) Or(conds ...gen.Condition) ICommunityEventDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c communityEventDo) Select(conds ...field.Expr) ICommunityEventDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c communityEventDo) Where(conds ...gen.Condition) ICommunityEventDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c communityEventDo) Order(conds ...field.Expr) ICommunityEventDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c communityEventDo) Distinct(cols ...field.Expr) ICommunityEventDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c communityEventDo) Omit(cols ...field.Expr) ICommunityEventDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c communityEventDo) Join(table schema.Tabler, on ...field.Expr) ICommunityEventDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c communityEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommunityEventDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c communityEventDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommunityEventDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c communityEventDo) Group(cols ...field.Expr) ICommunityEventDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c communityEventDo) Having(conds ...gen.Condition) ICommunityEventDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c communityEventDo) Limit(limit int) ICommunityEventDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c communityEventDo) Offset(offset int) ICommunityEventDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c communityEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunityEventDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c communityEventDo) Unscoped() ICommunityEventDo {
	return c.withDO(c.DO.Unscoped())
}

func (c communityEventDo) Create(values ...*model.CommunityEvent) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c communityEventDo) CreateInBatches(values []*model.CommunityEvent, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c communityEventDo) Save(values ...*model.CommunityEvent) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c communityEventDo) First() (*model.CommunityEvent, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityEvent), nil
	}
}

func (c communityEventDo) Take() (*model.CommunityEvent, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityEvent), nil
	}
}

func (c communityEventDo) Last() (*model.CommunityEvent, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityEvent), nil
	}
}

func (c communityEventDo) Find() ([]*model.CommunityEvent, error) {
	result, err := c.DO.Find()
	return result.([]*model.CommunityEvent), err
}

func (c communityEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommunityEvent, err error) {
	buf := make([]*model.CommunityEvent, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c communityEventDo) FindInBatches(result *[]*model.CommunityEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c communityEventDo) Attrs(attrs ...field.AssignExpr) ICommunityEventDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c communityEventDo) Assign(attrs ...field.AssignExpr) ICommunityEventDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c communityEventDo) Joins(fields ...field.RelationField) ICommunityEventDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c communityEventDo) Preload(fields ...field.RelationField) ICommunityEventDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c communityEventDo) FirstOrInit() (*model.CommunityEvent, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityEvent), nil
	}
}

func (c communityEventDo) FirstOrCreate() (*model.CommunityEvent, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityEvent), nil
	}
}

func (c communityEventDo) FindByPage(offset int, limit int) (result []*model.CommunityEvent, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c communityEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c communityEventDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c communityEventDo) Delete(models ...*model.CommunityEvent) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *communityEventDo) withDO(do gen.Dao) *communityEventDo {
	c.DO = *do.(*gen.DO)
	return c
}
