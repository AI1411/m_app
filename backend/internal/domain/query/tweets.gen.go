// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/m_app/internal/domain/model"
)

func newTweet(db *gorm.DB, opts ...gen.DOOption) tweet {
	_tweet := tweet{}

	_tweet.tweetDo.UseDB(db, opts...)
	_tweet.tweetDo.UseModel(&model.Tweet{})

	tableName := _tweet.tweetDo.TableName()
	_tweet.ALL = field.NewAsterisk(tableName)
	_tweet.ID = field.NewString(tableName, "id")
	_tweet.UserID = field.NewString(tableName, "user_id")
	_tweet.Content = field.NewString(tableName, "content")
	_tweet.CreatedAt = field.NewTime(tableName, "created_at")
	_tweet.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tweet.DeletedAt = field.NewField(tableName, "deleted_at")
	_tweet.User = tweetBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
	}

	_tweet.fillFieldMap()

	return _tweet
}

type tweet struct {
	tweetDo

	ALL       field.Asterisk
	ID        field.String // つぶやきの一意識別子（UUIDv4）
	UserID    field.String // つぶやきを投稿したユーザーのID
	Content   field.String // つぶやきの内容
	CreatedAt field.Time   // つぶやき作成日時
	UpdatedAt field.Time   // レコード更新日時
	DeletedAt field.Field  // 論理削除日時（NULLは有効なレコードを示す）
	User      tweetBelongsToUser

	fieldMap map[string]field.Expr
}

func (t tweet) Table(newTableName string) *tweet {
	t.tweetDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tweet) As(alias string) *tweet {
	t.tweetDo.DO = *(t.tweetDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tweet) updateTableName(table string) *tweet {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.UserID = field.NewString(table, "user_id")
	t.Content = field.NewString(table, "content")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tweet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tweet) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["content"] = t.Content
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt

}

func (t tweet) clone(db *gorm.DB) tweet {
	t.tweetDo.ReplaceConnPool(db.Statement.ConnPool)
	t.User.db = db.Session(&gorm.Session{Initialized: true})
	t.User.db.Statement.ConnPool = db.Statement.ConnPool
	return t
}

func (t tweet) replaceDB(db *gorm.DB) tweet {
	t.tweetDo.ReplaceDB(db)
	t.User.db = db.Session(&gorm.Session{})
	return t
}

type tweetBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a tweetBelongsToUser) Where(conds ...field.Expr) *tweetBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a tweetBelongsToUser) WithContext(ctx context.Context) *tweetBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a tweetBelongsToUser) Session(session *gorm.Session) *tweetBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a tweetBelongsToUser) Model(m *model.Tweet) *tweetBelongsToUserTx {
	return &tweetBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a tweetBelongsToUser) Unscoped() *tweetBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type tweetBelongsToUserTx struct{ tx *gorm.Association }

func (a tweetBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a tweetBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a tweetBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a tweetBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a tweetBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a tweetBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a tweetBelongsToUserTx) Unscoped() *tweetBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type tweetDo struct{ gen.DO }

type ITweetDo interface {
	gen.SubQuery
	Debug() ITweetDo
	WithContext(ctx context.Context) ITweetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITweetDo
	WriteDB() ITweetDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITweetDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITweetDo
	Not(conds ...gen.Condition) ITweetDo
	Or(conds ...gen.Condition) ITweetDo
	Select(conds ...field.Expr) ITweetDo
	Where(conds ...gen.Condition) ITweetDo
	Order(conds ...field.Expr) ITweetDo
	Distinct(cols ...field.Expr) ITweetDo
	Omit(cols ...field.Expr) ITweetDo
	Join(table schema.Tabler, on ...field.Expr) ITweetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITweetDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITweetDo
	Group(cols ...field.Expr) ITweetDo
	Having(conds ...gen.Condition) ITweetDo
	Limit(limit int) ITweetDo
	Offset(offset int) ITweetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITweetDo
	Unscoped() ITweetDo
	Create(values ...*model.Tweet) error
	CreateInBatches(values []*model.Tweet, batchSize int) error
	Save(values ...*model.Tweet) error
	First() (*model.Tweet, error)
	Take() (*model.Tweet, error)
	Last() (*model.Tweet, error)
	Find() ([]*model.Tweet, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Tweet, err error)
	FindInBatches(result *[]*model.Tweet, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Tweet) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITweetDo
	Assign(attrs ...field.AssignExpr) ITweetDo
	Joins(fields ...field.RelationField) ITweetDo
	Preload(fields ...field.RelationField) ITweetDo
	FirstOrInit() (*model.Tweet, error)
	FirstOrCreate() (*model.Tweet, error)
	FindByPage(offset int, limit int) (result []*model.Tweet, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITweetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tweetDo) Debug() ITweetDo {
	return t.withDO(t.DO.Debug())
}

func (t tweetDo) WithContext(ctx context.Context) ITweetDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tweetDo) ReadDB() ITweetDo {
	return t.Clauses(dbresolver.Read)
}

func (t tweetDo) WriteDB() ITweetDo {
	return t.Clauses(dbresolver.Write)
}

func (t tweetDo) Session(config *gorm.Session) ITweetDo {
	return t.withDO(t.DO.Session(config))
}

func (t tweetDo) Clauses(conds ...clause.Expression) ITweetDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tweetDo) Returning(value interface{}, columns ...string) ITweetDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tweetDo) Not(conds ...gen.Condition) ITweetDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tweetDo) Or(conds ...gen.Condition) ITweetDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tweetDo) Select(conds ...field.Expr) ITweetDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tweetDo) Where(conds ...gen.Condition) ITweetDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tweetDo) Order(conds ...field.Expr) ITweetDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tweetDo) Distinct(cols ...field.Expr) ITweetDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tweetDo) Omit(cols ...field.Expr) ITweetDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tweetDo) Join(table schema.Tabler, on ...field.Expr) ITweetDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tweetDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITweetDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tweetDo) RightJoin(table schema.Tabler, on ...field.Expr) ITweetDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tweetDo) Group(cols ...field.Expr) ITweetDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tweetDo) Having(conds ...gen.Condition) ITweetDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tweetDo) Limit(limit int) ITweetDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tweetDo) Offset(offset int) ITweetDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tweetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITweetDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tweetDo) Unscoped() ITweetDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tweetDo) Create(values ...*model.Tweet) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tweetDo) CreateInBatches(values []*model.Tweet, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tweetDo) Save(values ...*model.Tweet) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tweetDo) First() (*model.Tweet, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tweet), nil
	}
}

func (t tweetDo) Take() (*model.Tweet, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tweet), nil
	}
}

func (t tweetDo) Last() (*model.Tweet, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tweet), nil
	}
}

func (t tweetDo) Find() ([]*model.Tweet, error) {
	result, err := t.DO.Find()
	return result.([]*model.Tweet), err
}

func (t tweetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Tweet, err error) {
	buf := make([]*model.Tweet, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tweetDo) FindInBatches(result *[]*model.Tweet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tweetDo) Attrs(attrs ...field.AssignExpr) ITweetDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tweetDo) Assign(attrs ...field.AssignExpr) ITweetDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tweetDo) Joins(fields ...field.RelationField) ITweetDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tweetDo) Preload(fields ...field.RelationField) ITweetDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tweetDo) FirstOrInit() (*model.Tweet, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tweet), nil
	}
}

func (t tweetDo) FirstOrCreate() (*model.Tweet, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tweet), nil
	}
}

func (t tweetDo) FindByPage(offset int, limit int) (result []*model.Tweet, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tweetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tweetDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tweetDo) Delete(models ...*model.Tweet) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tweetDo) withDO(do gen.Dao) *tweetDo {
	t.DO = *do.(*gen.DO)
	return t
}
