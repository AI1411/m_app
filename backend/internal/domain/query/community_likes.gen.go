// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/m_app/internal/domain/model"
)

func newCommunityLike(db *gorm.DB, opts ...gen.DOOption) communityLike {
	_communityLike := communityLike{}

	_communityLike.communityLikeDo.UseDB(db, opts...)
	_communityLike.communityLikeDo.UseModel(&model.CommunityLike{})

	tableName := _communityLike.communityLikeDo.TableName()
	_communityLike.ALL = field.NewAsterisk(tableName)
	_communityLike.ID = field.NewString(tableName, "id")
	_communityLike.UserID = field.NewString(tableName, "user_id")
	_communityLike.PostID = field.NewString(tableName, "post_id")
	_communityLike.CommentID = field.NewString(tableName, "comment_id")
	_communityLike.CreatedAt = field.NewTime(tableName, "created_at")

	_communityLike.fillFieldMap()

	return _communityLike
}

type communityLike struct {
	communityLikeDo

	ALL       field.Asterisk
	ID        field.String
	UserID    field.String
	PostID    field.String
	CommentID field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (c communityLike) Table(newTableName string) *communityLike {
	c.communityLikeDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c communityLike) As(alias string) *communityLike {
	c.communityLikeDo.DO = *(c.communityLikeDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *communityLike) updateTableName(table string) *communityLike {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.UserID = field.NewString(table, "user_id")
	c.PostID = field.NewString(table, "post_id")
	c.CommentID = field.NewString(table, "comment_id")
	c.CreatedAt = field.NewTime(table, "created_at")

	c.fillFieldMap()

	return c
}

func (c *communityLike) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *communityLike) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["post_id"] = c.PostID
	c.fieldMap["comment_id"] = c.CommentID
	c.fieldMap["created_at"] = c.CreatedAt
}

func (c communityLike) clone(db *gorm.DB) communityLike {
	c.communityLikeDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c communityLike) replaceDB(db *gorm.DB) communityLike {
	c.communityLikeDo.ReplaceDB(db)
	return c
}

type communityLikeDo struct{ gen.DO }

type ICommunityLikeDo interface {
	gen.SubQuery
	Debug() ICommunityLikeDo
	WithContext(ctx context.Context) ICommunityLikeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommunityLikeDo
	WriteDB() ICommunityLikeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommunityLikeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommunityLikeDo
	Not(conds ...gen.Condition) ICommunityLikeDo
	Or(conds ...gen.Condition) ICommunityLikeDo
	Select(conds ...field.Expr) ICommunityLikeDo
	Where(conds ...gen.Condition) ICommunityLikeDo
	Order(conds ...field.Expr) ICommunityLikeDo
	Distinct(cols ...field.Expr) ICommunityLikeDo
	Omit(cols ...field.Expr) ICommunityLikeDo
	Join(table schema.Tabler, on ...field.Expr) ICommunityLikeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommunityLikeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommunityLikeDo
	Group(cols ...field.Expr) ICommunityLikeDo
	Having(conds ...gen.Condition) ICommunityLikeDo
	Limit(limit int) ICommunityLikeDo
	Offset(offset int) ICommunityLikeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunityLikeDo
	Unscoped() ICommunityLikeDo
	Create(values ...*model.CommunityLike) error
	CreateInBatches(values []*model.CommunityLike, batchSize int) error
	Save(values ...*model.CommunityLike) error
	First() (*model.CommunityLike, error)
	Take() (*model.CommunityLike, error)
	Last() (*model.CommunityLike, error)
	Find() ([]*model.CommunityLike, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommunityLike, err error)
	FindInBatches(result *[]*model.CommunityLike, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CommunityLike) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommunityLikeDo
	Assign(attrs ...field.AssignExpr) ICommunityLikeDo
	Joins(fields ...field.RelationField) ICommunityLikeDo
	Preload(fields ...field.RelationField) ICommunityLikeDo
	FirstOrInit() (*model.CommunityLike, error)
	FirstOrCreate() (*model.CommunityLike, error)
	FindByPage(offset int, limit int) (result []*model.CommunityLike, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommunityLikeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c communityLikeDo) Debug() ICommunityLikeDo {
	return c.withDO(c.DO.Debug())
}

func (c communityLikeDo) WithContext(ctx context.Context) ICommunityLikeDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c communityLikeDo) ReadDB() ICommunityLikeDo {
	return c.Clauses(dbresolver.Read)
}

func (c communityLikeDo) WriteDB() ICommunityLikeDo {
	return c.Clauses(dbresolver.Write)
}

func (c communityLikeDo) Session(config *gorm.Session) ICommunityLikeDo {
	return c.withDO(c.DO.Session(config))
}

func (c communityLikeDo) Clauses(conds ...clause.Expression) ICommunityLikeDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c communityLikeDo) Returning(value interface{}, columns ...string) ICommunityLikeDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c communityLikeDo) Not(conds ...gen.Condition) ICommunityLikeDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c communityLikeDo) Or(conds ...gen.Condition) ICommunityLikeDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c communityLikeDo) Select(conds ...field.Expr) ICommunityLikeDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c communityLikeDo) Where(conds ...gen.Condition) ICommunityLikeDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c communityLikeDo) Order(conds ...field.Expr) ICommunityLikeDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c communityLikeDo) Distinct(cols ...field.Expr) ICommunityLikeDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c communityLikeDo) Omit(cols ...field.Expr) ICommunityLikeDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c communityLikeDo) Join(table schema.Tabler, on ...field.Expr) ICommunityLikeDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c communityLikeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommunityLikeDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c communityLikeDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommunityLikeDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c communityLikeDo) Group(cols ...field.Expr) ICommunityLikeDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c communityLikeDo) Having(conds ...gen.Condition) ICommunityLikeDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c communityLikeDo) Limit(limit int) ICommunityLikeDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c communityLikeDo) Offset(offset int) ICommunityLikeDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c communityLikeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunityLikeDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c communityLikeDo) Unscoped() ICommunityLikeDo {
	return c.withDO(c.DO.Unscoped())
}

func (c communityLikeDo) Create(values ...*model.CommunityLike) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c communityLikeDo) CreateInBatches(values []*model.CommunityLike, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c communityLikeDo) Save(values ...*model.CommunityLike) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c communityLikeDo) First() (*model.CommunityLike, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityLike), nil
	}
}

func (c communityLikeDo) Take() (*model.CommunityLike, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityLike), nil
	}
}

func (c communityLikeDo) Last() (*model.CommunityLike, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityLike), nil
	}
}

func (c communityLikeDo) Find() ([]*model.CommunityLike, error) {
	result, err := c.DO.Find()
	return result.([]*model.CommunityLike), err
}

func (c communityLikeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommunityLike, err error) {
	buf := make([]*model.CommunityLike, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c communityLikeDo) FindInBatches(result *[]*model.CommunityLike, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c communityLikeDo) Attrs(attrs ...field.AssignExpr) ICommunityLikeDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c communityLikeDo) Assign(attrs ...field.AssignExpr) ICommunityLikeDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c communityLikeDo) Joins(fields ...field.RelationField) ICommunityLikeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c communityLikeDo) Preload(fields ...field.RelationField) ICommunityLikeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c communityLikeDo) FirstOrInit() (*model.CommunityLike, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityLike), nil
	}
}

func (c communityLikeDo) FirstOrCreate() (*model.CommunityLike, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunityLike), nil
	}
}

func (c communityLikeDo) FindByPage(offset int, limit int) (result []*model.CommunityLike, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c communityLikeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c communityLikeDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c communityLikeDo) Delete(models ...*model.CommunityLike) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *communityLikeDo) withDO(do gen.Dao) *communityLikeDo {
	c.DO = *do.(*gen.DO)
	return c
}
