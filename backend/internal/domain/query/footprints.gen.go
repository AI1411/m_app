// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/m_app/internal/domain/model"
)

func newFootprint(db *gorm.DB, opts ...gen.DOOption) footprint {
	_footprint := footprint{}

	_footprint.footprintDo.UseDB(db, opts...)
	_footprint.footprintDo.UseModel(&model.Footprint{})

	tableName := _footprint.footprintDo.TableName()
	_footprint.ALL = field.NewAsterisk(tableName)
	_footprint.ID = field.NewString(tableName, "id")
	_footprint.VisitorUserID = field.NewString(tableName, "visitor_user_id")
	_footprint.VisitedUserID = field.NewString(tableName, "visited_user_id")
	_footprint.VisitedAt = field.NewTime(tableName, "visited_at")
	_footprint.CreatedAt = field.NewTime(tableName, "created_at")
	_footprint.UpdatedAt = field.NewTime(tableName, "updated_at")
	_footprint.DeletedAt = field.NewField(tableName, "deleted_at")
	_footprint.User = footprintBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
	}

	_footprint.VisitedUser = footprintBelongsToVisitedUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("VisitedUser", "model.User"),
	}

	_footprint.fillFieldMap()

	return _footprint
}

type footprint struct {
	footprintDo

	ALL           field.Asterisk
	ID            field.String // 足あとの一意識別子（UUIDv4）
	VisitorUserID field.String // プロフィールを閲覧したユーザーのID
	VisitedUserID field.String // プロフィールを閲覧されたユーザーのID
	VisitedAt     field.Time   // プロフィール閲覧日時
	CreatedAt     field.Time   // レコード作成日時
	UpdatedAt     field.Time   // レコード更新日時
	DeletedAt     field.Field  // 論理削除日時（NULLは有効なレコードを示す）
	User          footprintBelongsToUser

	VisitedUser footprintBelongsToVisitedUser

	fieldMap map[string]field.Expr
}

func (f footprint) Table(newTableName string) *footprint {
	f.footprintDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f footprint) As(alias string) *footprint {
	f.footprintDo.DO = *(f.footprintDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *footprint) updateTableName(table string) *footprint {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewString(table, "id")
	f.VisitorUserID = field.NewString(table, "visitor_user_id")
	f.VisitedUserID = field.NewString(table, "visited_user_id")
	f.VisitedAt = field.NewTime(table, "visited_at")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")

	f.fillFieldMap()

	return f
}

func (f *footprint) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *footprint) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["id"] = f.ID
	f.fieldMap["visitor_user_id"] = f.VisitorUserID
	f.fieldMap["visited_user_id"] = f.VisitedUserID
	f.fieldMap["visited_at"] = f.VisitedAt
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt

}

func (f footprint) clone(db *gorm.DB) footprint {
	f.footprintDo.ReplaceConnPool(db.Statement.ConnPool)
	f.User.db = db.Session(&gorm.Session{Initialized: true})
	f.User.db.Statement.ConnPool = db.Statement.ConnPool
	f.VisitedUser.db = db.Session(&gorm.Session{Initialized: true})
	f.VisitedUser.db.Statement.ConnPool = db.Statement.ConnPool
	return f
}

func (f footprint) replaceDB(db *gorm.DB) footprint {
	f.footprintDo.ReplaceDB(db)
	f.User.db = db.Session(&gorm.Session{})
	f.VisitedUser.db = db.Session(&gorm.Session{})
	return f
}

type footprintBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a footprintBelongsToUser) Where(conds ...field.Expr) *footprintBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a footprintBelongsToUser) WithContext(ctx context.Context) *footprintBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a footprintBelongsToUser) Session(session *gorm.Session) *footprintBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a footprintBelongsToUser) Model(m *model.Footprint) *footprintBelongsToUserTx {
	return &footprintBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a footprintBelongsToUser) Unscoped() *footprintBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type footprintBelongsToUserTx struct{ tx *gorm.Association }

func (a footprintBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a footprintBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a footprintBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a footprintBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a footprintBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a footprintBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a footprintBelongsToUserTx) Unscoped() *footprintBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type footprintBelongsToVisitedUser struct {
	db *gorm.DB

	field.RelationField
}

func (a footprintBelongsToVisitedUser) Where(conds ...field.Expr) *footprintBelongsToVisitedUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a footprintBelongsToVisitedUser) WithContext(ctx context.Context) *footprintBelongsToVisitedUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a footprintBelongsToVisitedUser) Session(session *gorm.Session) *footprintBelongsToVisitedUser {
	a.db = a.db.Session(session)
	return &a
}

func (a footprintBelongsToVisitedUser) Model(m *model.Footprint) *footprintBelongsToVisitedUserTx {
	return &footprintBelongsToVisitedUserTx{a.db.Model(m).Association(a.Name())}
}

func (a footprintBelongsToVisitedUser) Unscoped() *footprintBelongsToVisitedUser {
	a.db = a.db.Unscoped()
	return &a
}

type footprintBelongsToVisitedUserTx struct{ tx *gorm.Association }

func (a footprintBelongsToVisitedUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a footprintBelongsToVisitedUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a footprintBelongsToVisitedUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a footprintBelongsToVisitedUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a footprintBelongsToVisitedUserTx) Clear() error {
	return a.tx.Clear()
}

func (a footprintBelongsToVisitedUserTx) Count() int64 {
	return a.tx.Count()
}

func (a footprintBelongsToVisitedUserTx) Unscoped() *footprintBelongsToVisitedUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type footprintDo struct{ gen.DO }

type IFootprintDo interface {
	gen.SubQuery
	Debug() IFootprintDo
	WithContext(ctx context.Context) IFootprintDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFootprintDo
	WriteDB() IFootprintDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFootprintDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFootprintDo
	Not(conds ...gen.Condition) IFootprintDo
	Or(conds ...gen.Condition) IFootprintDo
	Select(conds ...field.Expr) IFootprintDo
	Where(conds ...gen.Condition) IFootprintDo
	Order(conds ...field.Expr) IFootprintDo
	Distinct(cols ...field.Expr) IFootprintDo
	Omit(cols ...field.Expr) IFootprintDo
	Join(table schema.Tabler, on ...field.Expr) IFootprintDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFootprintDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFootprintDo
	Group(cols ...field.Expr) IFootprintDo
	Having(conds ...gen.Condition) IFootprintDo
	Limit(limit int) IFootprintDo
	Offset(offset int) IFootprintDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFootprintDo
	Unscoped() IFootprintDo
	Create(values ...*model.Footprint) error
	CreateInBatches(values []*model.Footprint, batchSize int) error
	Save(values ...*model.Footprint) error
	First() (*model.Footprint, error)
	Take() (*model.Footprint, error)
	Last() (*model.Footprint, error)
	Find() ([]*model.Footprint, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Footprint, err error)
	FindInBatches(result *[]*model.Footprint, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Footprint) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFootprintDo
	Assign(attrs ...field.AssignExpr) IFootprintDo
	Joins(fields ...field.RelationField) IFootprintDo
	Preload(fields ...field.RelationField) IFootprintDo
	FirstOrInit() (*model.Footprint, error)
	FirstOrCreate() (*model.Footprint, error)
	FindByPage(offset int, limit int) (result []*model.Footprint, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFootprintDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f footprintDo) Debug() IFootprintDo {
	return f.withDO(f.DO.Debug())
}

func (f footprintDo) WithContext(ctx context.Context) IFootprintDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f footprintDo) ReadDB() IFootprintDo {
	return f.Clauses(dbresolver.Read)
}

func (f footprintDo) WriteDB() IFootprintDo {
	return f.Clauses(dbresolver.Write)
}

func (f footprintDo) Session(config *gorm.Session) IFootprintDo {
	return f.withDO(f.DO.Session(config))
}

func (f footprintDo) Clauses(conds ...clause.Expression) IFootprintDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f footprintDo) Returning(value interface{}, columns ...string) IFootprintDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f footprintDo) Not(conds ...gen.Condition) IFootprintDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f footprintDo) Or(conds ...gen.Condition) IFootprintDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f footprintDo) Select(conds ...field.Expr) IFootprintDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f footprintDo) Where(conds ...gen.Condition) IFootprintDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f footprintDo) Order(conds ...field.Expr) IFootprintDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f footprintDo) Distinct(cols ...field.Expr) IFootprintDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f footprintDo) Omit(cols ...field.Expr) IFootprintDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f footprintDo) Join(table schema.Tabler, on ...field.Expr) IFootprintDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f footprintDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFootprintDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f footprintDo) RightJoin(table schema.Tabler, on ...field.Expr) IFootprintDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f footprintDo) Group(cols ...field.Expr) IFootprintDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f footprintDo) Having(conds ...gen.Condition) IFootprintDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f footprintDo) Limit(limit int) IFootprintDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f footprintDo) Offset(offset int) IFootprintDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f footprintDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFootprintDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f footprintDo) Unscoped() IFootprintDo {
	return f.withDO(f.DO.Unscoped())
}

func (f footprintDo) Create(values ...*model.Footprint) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f footprintDo) CreateInBatches(values []*model.Footprint, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f footprintDo) Save(values ...*model.Footprint) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f footprintDo) First() (*model.Footprint, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Footprint), nil
	}
}

func (f footprintDo) Take() (*model.Footprint, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Footprint), nil
	}
}

func (f footprintDo) Last() (*model.Footprint, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Footprint), nil
	}
}

func (f footprintDo) Find() ([]*model.Footprint, error) {
	result, err := f.DO.Find()
	return result.([]*model.Footprint), err
}

func (f footprintDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Footprint, err error) {
	buf := make([]*model.Footprint, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f footprintDo) FindInBatches(result *[]*model.Footprint, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f footprintDo) Attrs(attrs ...field.AssignExpr) IFootprintDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f footprintDo) Assign(attrs ...field.AssignExpr) IFootprintDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f footprintDo) Joins(fields ...field.RelationField) IFootprintDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f footprintDo) Preload(fields ...field.RelationField) IFootprintDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f footprintDo) FirstOrInit() (*model.Footprint, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Footprint), nil
	}
}

func (f footprintDo) FirstOrCreate() (*model.Footprint, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Footprint), nil
	}
}

func (f footprintDo) FindByPage(offset int, limit int) (result []*model.Footprint, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f footprintDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f footprintDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f footprintDo) Delete(models ...*model.Footprint) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *footprintDo) withDO(do gen.Dao) *footprintDo {
	f.DO = *do.(*gen.DO)
	return f
}
