// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/m_app/internal/domain/model"
)

func newEducation(db *gorm.DB, opts ...gen.DOOption) education {
	_education := education{}

	_education.educationDo.UseDB(db, opts...)
	_education.educationDo.UseModel(&model.Education{})

	tableName := _education.educationDo.TableName()
	_education.ALL = field.NewAsterisk(tableName)
	_education.ID = field.NewInt32(tableName, "id")
	_education.Name = field.NewString(tableName, "name")
	_education.SortOrder = field.NewInt32(tableName, "sort_order")
	_education.CreatedAt = field.NewTime(tableName, "created_at")
	_education.UpdatedAt = field.NewTime(tableName, "updated_at")
	_education.DeletedAt = field.NewField(tableName, "deleted_at")
	_education.Users = educationHasManyUsers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Users", "model.User"),
	}

	_education.fillFieldMap()

	return _education
}

type education struct {
	educationDo

	ALL       field.Asterisk
	ID        field.Int32  // 学歴ID
	Name      field.String // 学歴名（高卒、専門卒、大卒など）
	SortOrder field.Int32  // 表示順序
	CreatedAt field.Time   // レコード作成日時
	UpdatedAt field.Time   // レコード更新日時
	DeletedAt field.Field  // 論理削除日時（NULLは有効なレコードを示す）
	Users     educationHasManyUsers

	fieldMap map[string]field.Expr
}

func (e education) Table(newTableName string) *education {
	e.educationDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e education) As(alias string) *education {
	e.educationDo.DO = *(e.educationDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *education) updateTableName(table string) *education {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Name = field.NewString(table, "name")
	e.SortOrder = field.NewInt32(table, "sort_order")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *education) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *education) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["sort_order"] = e.SortOrder
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt

}

func (e education) clone(db *gorm.DB) education {
	e.educationDo.ReplaceConnPool(db.Statement.ConnPool)
	e.Users.db = db.Session(&gorm.Session{Initialized: true})
	e.Users.db.Statement.ConnPool = db.Statement.ConnPool
	return e
}

func (e education) replaceDB(db *gorm.DB) education {
	e.educationDo.ReplaceDB(db)
	e.Users.db = db.Session(&gorm.Session{})
	return e
}

type educationHasManyUsers struct {
	db *gorm.DB

	field.RelationField
}

func (a educationHasManyUsers) Where(conds ...field.Expr) *educationHasManyUsers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a educationHasManyUsers) WithContext(ctx context.Context) *educationHasManyUsers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a educationHasManyUsers) Session(session *gorm.Session) *educationHasManyUsers {
	a.db = a.db.Session(session)
	return &a
}

func (a educationHasManyUsers) Model(m *model.Education) *educationHasManyUsersTx {
	return &educationHasManyUsersTx{a.db.Model(m).Association(a.Name())}
}

func (a educationHasManyUsers) Unscoped() *educationHasManyUsers {
	a.db = a.db.Unscoped()
	return &a
}

type educationHasManyUsersTx struct{ tx *gorm.Association }

func (a educationHasManyUsersTx) Find() (result []*model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a educationHasManyUsersTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a educationHasManyUsersTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a educationHasManyUsersTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a educationHasManyUsersTx) Clear() error {
	return a.tx.Clear()
}

func (a educationHasManyUsersTx) Count() int64 {
	return a.tx.Count()
}

func (a educationHasManyUsersTx) Unscoped() *educationHasManyUsersTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type educationDo struct{ gen.DO }

type IEducationDo interface {
	gen.SubQuery
	Debug() IEducationDo
	WithContext(ctx context.Context) IEducationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEducationDo
	WriteDB() IEducationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEducationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEducationDo
	Not(conds ...gen.Condition) IEducationDo
	Or(conds ...gen.Condition) IEducationDo
	Select(conds ...field.Expr) IEducationDo
	Where(conds ...gen.Condition) IEducationDo
	Order(conds ...field.Expr) IEducationDo
	Distinct(cols ...field.Expr) IEducationDo
	Omit(cols ...field.Expr) IEducationDo
	Join(table schema.Tabler, on ...field.Expr) IEducationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEducationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEducationDo
	Group(cols ...field.Expr) IEducationDo
	Having(conds ...gen.Condition) IEducationDo
	Limit(limit int) IEducationDo
	Offset(offset int) IEducationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEducationDo
	Unscoped() IEducationDo
	Create(values ...*model.Education) error
	CreateInBatches(values []*model.Education, batchSize int) error
	Save(values ...*model.Education) error
	First() (*model.Education, error)
	Take() (*model.Education, error)
	Last() (*model.Education, error)
	Find() ([]*model.Education, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Education, err error)
	FindInBatches(result *[]*model.Education, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Education) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEducationDo
	Assign(attrs ...field.AssignExpr) IEducationDo
	Joins(fields ...field.RelationField) IEducationDo
	Preload(fields ...field.RelationField) IEducationDo
	FirstOrInit() (*model.Education, error)
	FirstOrCreate() (*model.Education, error)
	FindByPage(offset int, limit int) (result []*model.Education, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEducationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e educationDo) Debug() IEducationDo {
	return e.withDO(e.DO.Debug())
}

func (e educationDo) WithContext(ctx context.Context) IEducationDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e educationDo) ReadDB() IEducationDo {
	return e.Clauses(dbresolver.Read)
}

func (e educationDo) WriteDB() IEducationDo {
	return e.Clauses(dbresolver.Write)
}

func (e educationDo) Session(config *gorm.Session) IEducationDo {
	return e.withDO(e.DO.Session(config))
}

func (e educationDo) Clauses(conds ...clause.Expression) IEducationDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e educationDo) Returning(value interface{}, columns ...string) IEducationDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e educationDo) Not(conds ...gen.Condition) IEducationDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e educationDo) Or(conds ...gen.Condition) IEducationDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e educationDo) Select(conds ...field.Expr) IEducationDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e educationDo) Where(conds ...gen.Condition) IEducationDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e educationDo) Order(conds ...field.Expr) IEducationDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e educationDo) Distinct(cols ...field.Expr) IEducationDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e educationDo) Omit(cols ...field.Expr) IEducationDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e educationDo) Join(table schema.Tabler, on ...field.Expr) IEducationDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e educationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEducationDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e educationDo) RightJoin(table schema.Tabler, on ...field.Expr) IEducationDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e educationDo) Group(cols ...field.Expr) IEducationDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e educationDo) Having(conds ...gen.Condition) IEducationDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e educationDo) Limit(limit int) IEducationDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e educationDo) Offset(offset int) IEducationDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e educationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEducationDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e educationDo) Unscoped() IEducationDo {
	return e.withDO(e.DO.Unscoped())
}

func (e educationDo) Create(values ...*model.Education) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e educationDo) CreateInBatches(values []*model.Education, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e educationDo) Save(values ...*model.Education) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e educationDo) First() (*model.Education, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Education), nil
	}
}

func (e educationDo) Take() (*model.Education, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Education), nil
	}
}

func (e educationDo) Last() (*model.Education, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Education), nil
	}
}

func (e educationDo) Find() ([]*model.Education, error) {
	result, err := e.DO.Find()
	return result.([]*model.Education), err
}

func (e educationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Education, err error) {
	buf := make([]*model.Education, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e educationDo) FindInBatches(result *[]*model.Education, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e educationDo) Attrs(attrs ...field.AssignExpr) IEducationDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e educationDo) Assign(attrs ...field.AssignExpr) IEducationDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e educationDo) Joins(fields ...field.RelationField) IEducationDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e educationDo) Preload(fields ...field.RelationField) IEducationDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e educationDo) FirstOrInit() (*model.Education, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Education), nil
	}
}

func (e educationDo) FirstOrCreate() (*model.Education, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Education), nil
	}
}

func (e educationDo) FindByPage(offset int, limit int) (result []*model.Education, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e educationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e educationDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e educationDo) Delete(models ...*model.Education) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *educationDo) withDO(do gen.Dao) *educationDo {
	e.DO = *do.(*gen.DO)
	return e
}
