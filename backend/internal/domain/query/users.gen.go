// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/m_app/internal/domain/model"
)

func newUser(db *gorm.DB, opts ...gen.DOOption) user {
	_user := user{}

	_user.userDo.UseDB(db, opts...)
	_user.userDo.UseModel(&model.User{})

	tableName := _user.userDo.TableName()
	_user.ALL = field.NewAsterisk(tableName)
	_user.ID = field.NewString(tableName, "id")
	_user.Email = field.NewString(tableName, "email")
	_user.PasswordHash = field.NewString(tableName, "password_hash")
	_user.Name = field.NewString(tableName, "name")
	_user.Nickname = field.NewString(tableName, "nickname")
	_user.BirthDate = field.NewTime(tableName, "birth_date")
	_user.Gender = field.NewString(tableName, "gender")
	_user.ProfileImageURL = field.NewString(tableName, "profile_image_url")
	_user.AboutMe = field.NewString(tableName, "about_me")
	_user.JobTitle = field.NewString(tableName, "job_title")
	_user.Company = field.NewString(tableName, "company")
	_user.EducationID = field.NewInt32(tableName, "education_id")
	_user.PrefectureID = field.NewInt32(tableName, "prefecture_id")
	_user.LookingFor = field.NewString(tableName, "looking_for")
	_user.LastActive = field.NewTime(tableName, "last_active")
	_user.IsVerified = field.NewBool(tableName, "is_verified")
	_user.IsPremium = field.NewBool(tableName, "is_premium")
	_user.CreatedAt = field.NewTime(tableName, "created_at")
	_user.UpdatedAt = field.NewTime(tableName, "updated_at")
	_user.DeletedAt = field.NewField(tableName, "deleted_at")
	_user.UserInterests = userHasManyUserInterests{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("UserInterests", "model.UserInterest"),
	}

	_user.Prefecture = userBelongsToPrefecture{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Prefecture", "model.Prefecture"),
	}

	_user.Education = userBelongsToEducation{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Education", "model.Education"),
	}

	_user.fillFieldMap()

	return _user
}

type user struct {
	userDo

	ALL             field.Asterisk
	ID              field.String // ユーザーの一意識別子（UUIDv4）
	Email           field.String // ユーザーのメールアドレス（認証と通知に使用）
	PasswordHash    field.String // パスワードのハッシュ値（平文保存は不可）
	Name            field.String // ユーザーの本名
	Nickname        field.String // ユーザーのニックネーム（表示名）
	BirthDate       field.Time   // 生年月日
	Gender          field.String // 性別（マッチング条件として使用）
	ProfileImageURL field.String // プロフィール画像のURL
	AboutMe         field.String // 自己紹介文
	JobTitle        field.String // 職業・職種
	Company         field.String // 会社名・組織名
	EducationID     field.Int32  // 学歴ID
	PrefectureID    field.Int32  // 都道府県ID
	LookingFor      field.String // 求めている関係性の説明
	LastActive      field.Time   // 最終アクティブ日時
	IsVerified      field.Bool   // アカウント認証済みフラグ
	IsPremium       field.Bool   // プレミアムアカウントフラグ
	CreatedAt       field.Time   // レコード作成日時
	UpdatedAt       field.Time   // レコード更新日時
	DeletedAt       field.Field  // 論理削除日時（NULLは有効なレコードを示す）
	UserInterests   userHasManyUserInterests

	Prefecture userBelongsToPrefecture

	Education userBelongsToEducation

	fieldMap map[string]field.Expr
}

func (u user) Table(newTableName string) *user {
	u.userDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u user) As(alias string) *user {
	u.userDo.DO = *(u.userDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *user) updateTableName(table string) *user {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewString(table, "id")
	u.Email = field.NewString(table, "email")
	u.PasswordHash = field.NewString(table, "password_hash")
	u.Name = field.NewString(table, "name")
	u.Nickname = field.NewString(table, "nickname")
	u.BirthDate = field.NewTime(table, "birth_date")
	u.Gender = field.NewString(table, "gender")
	u.ProfileImageURL = field.NewString(table, "profile_image_url")
	u.AboutMe = field.NewString(table, "about_me")
	u.JobTitle = field.NewString(table, "job_title")
	u.Company = field.NewString(table, "company")
	u.EducationID = field.NewInt32(table, "education_id")
	u.PrefectureID = field.NewInt32(table, "prefecture_id")
	u.LookingFor = field.NewString(table, "looking_for")
	u.LastActive = field.NewTime(table, "last_active")
	u.IsVerified = field.NewBool(table, "is_verified")
	u.IsPremium = field.NewBool(table, "is_premium")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *user) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *user) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 23)
	u.fieldMap["id"] = u.ID
	u.fieldMap["email"] = u.Email
	u.fieldMap["password_hash"] = u.PasswordHash
	u.fieldMap["name"] = u.Name
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["birth_date"] = u.BirthDate
	u.fieldMap["gender"] = u.Gender
	u.fieldMap["profile_image_url"] = u.ProfileImageURL
	u.fieldMap["about_me"] = u.AboutMe
	u.fieldMap["job_title"] = u.JobTitle
	u.fieldMap["company"] = u.Company
	u.fieldMap["education_id"] = u.EducationID
	u.fieldMap["prefecture_id"] = u.PrefectureID
	u.fieldMap["looking_for"] = u.LookingFor
	u.fieldMap["last_active"] = u.LastActive
	u.fieldMap["is_verified"] = u.IsVerified
	u.fieldMap["is_premium"] = u.IsPremium
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt

}

func (u user) clone(db *gorm.DB) user {
	u.userDo.ReplaceConnPool(db.Statement.ConnPool)
	u.UserInterests.db = db.Session(&gorm.Session{Initialized: true})
	u.UserInterests.db.Statement.ConnPool = db.Statement.ConnPool
	u.Prefecture.db = db.Session(&gorm.Session{Initialized: true})
	u.Prefecture.db.Statement.ConnPool = db.Statement.ConnPool
	u.Education.db = db.Session(&gorm.Session{Initialized: true})
	u.Education.db.Statement.ConnPool = db.Statement.ConnPool
	return u
}

func (u user) replaceDB(db *gorm.DB) user {
	u.userDo.ReplaceDB(db)
	u.UserInterests.db = db.Session(&gorm.Session{})
	u.Prefecture.db = db.Session(&gorm.Session{})
	u.Education.db = db.Session(&gorm.Session{})
	return u
}

type userHasManyUserInterests struct {
	db *gorm.DB

	field.RelationField
}

func (a userHasManyUserInterests) Where(conds ...field.Expr) *userHasManyUserInterests {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyUserInterests) WithContext(ctx context.Context) *userHasManyUserInterests {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyUserInterests) Session(session *gorm.Session) *userHasManyUserInterests {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyUserInterests) Model(m *model.User) *userHasManyUserInterestsTx {
	return &userHasManyUserInterestsTx{a.db.Model(m).Association(a.Name())}
}

func (a userHasManyUserInterests) Unscoped() *userHasManyUserInterests {
	a.db = a.db.Unscoped()
	return &a
}

type userHasManyUserInterestsTx struct{ tx *gorm.Association }

func (a userHasManyUserInterestsTx) Find() (result []*model.UserInterest, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyUserInterestsTx) Append(values ...*model.UserInterest) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyUserInterestsTx) Replace(values ...*model.UserInterest) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyUserInterestsTx) Delete(values ...*model.UserInterest) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyUserInterestsTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyUserInterestsTx) Count() int64 {
	return a.tx.Count()
}

func (a userHasManyUserInterestsTx) Unscoped() *userHasManyUserInterestsTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userBelongsToPrefecture struct {
	db *gorm.DB

	field.RelationField
}

func (a userBelongsToPrefecture) Where(conds ...field.Expr) *userBelongsToPrefecture {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userBelongsToPrefecture) WithContext(ctx context.Context) *userBelongsToPrefecture {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userBelongsToPrefecture) Session(session *gorm.Session) *userBelongsToPrefecture {
	a.db = a.db.Session(session)
	return &a
}

func (a userBelongsToPrefecture) Model(m *model.User) *userBelongsToPrefectureTx {
	return &userBelongsToPrefectureTx{a.db.Model(m).Association(a.Name())}
}

func (a userBelongsToPrefecture) Unscoped() *userBelongsToPrefecture {
	a.db = a.db.Unscoped()
	return &a
}

type userBelongsToPrefectureTx struct{ tx *gorm.Association }

func (a userBelongsToPrefectureTx) Find() (result *model.Prefecture, err error) {
	return result, a.tx.Find(&result)
}

func (a userBelongsToPrefectureTx) Append(values ...*model.Prefecture) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userBelongsToPrefectureTx) Replace(values ...*model.Prefecture) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userBelongsToPrefectureTx) Delete(values ...*model.Prefecture) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userBelongsToPrefectureTx) Clear() error {
	return a.tx.Clear()
}

func (a userBelongsToPrefectureTx) Count() int64 {
	return a.tx.Count()
}

func (a userBelongsToPrefectureTx) Unscoped() *userBelongsToPrefectureTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userBelongsToEducation struct {
	db *gorm.DB

	field.RelationField
}

func (a userBelongsToEducation) Where(conds ...field.Expr) *userBelongsToEducation {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userBelongsToEducation) WithContext(ctx context.Context) *userBelongsToEducation {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userBelongsToEducation) Session(session *gorm.Session) *userBelongsToEducation {
	a.db = a.db.Session(session)
	return &a
}

func (a userBelongsToEducation) Model(m *model.User) *userBelongsToEducationTx {
	return &userBelongsToEducationTx{a.db.Model(m).Association(a.Name())}
}

func (a userBelongsToEducation) Unscoped() *userBelongsToEducation {
	a.db = a.db.Unscoped()
	return &a
}

type userBelongsToEducationTx struct{ tx *gorm.Association }

func (a userBelongsToEducationTx) Find() (result *model.Education, err error) {
	return result, a.tx.Find(&result)
}

func (a userBelongsToEducationTx) Append(values ...*model.Education) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userBelongsToEducationTx) Replace(values ...*model.Education) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userBelongsToEducationTx) Delete(values ...*model.Education) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userBelongsToEducationTx) Clear() error {
	return a.tx.Clear()
}

func (a userBelongsToEducationTx) Count() int64 {
	return a.tx.Count()
}

func (a userBelongsToEducationTx) Unscoped() *userBelongsToEducationTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userDo struct{ gen.DO }

type IUserDo interface {
	gen.SubQuery
	Debug() IUserDo
	WithContext(ctx context.Context) IUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDo
	WriteDB() IUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDo
	Not(conds ...gen.Condition) IUserDo
	Or(conds ...gen.Condition) IUserDo
	Select(conds ...field.Expr) IUserDo
	Where(conds ...gen.Condition) IUserDo
	Order(conds ...field.Expr) IUserDo
	Distinct(cols ...field.Expr) IUserDo
	Omit(cols ...field.Expr) IUserDo
	Join(table schema.Tabler, on ...field.Expr) IUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDo
	Group(cols ...field.Expr) IUserDo
	Having(conds ...gen.Condition) IUserDo
	Limit(limit int) IUserDo
	Offset(offset int) IUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo
	Unscoped() IUserDo
	Create(values ...*model.User) error
	CreateInBatches(values []*model.User, batchSize int) error
	Save(values ...*model.User) error
	First() (*model.User, error)
	Take() (*model.User, error)
	Last() (*model.User, error)
	Find() ([]*model.User, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error)
	FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.User) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDo
	Assign(attrs ...field.AssignExpr) IUserDo
	Joins(fields ...field.RelationField) IUserDo
	Preload(fields ...field.RelationField) IUserDo
	FirstOrInit() (*model.User, error)
	FirstOrCreate() (*model.User, error)
	FindByPage(offset int, limit int) (result []*model.User, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userDo) Debug() IUserDo {
	return u.withDO(u.DO.Debug())
}

func (u userDo) WithContext(ctx context.Context) IUserDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDo) ReadDB() IUserDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDo) WriteDB() IUserDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDo) Session(config *gorm.Session) IUserDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDo) Clauses(conds ...clause.Expression) IUserDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDo) Returning(value interface{}, columns ...string) IUserDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDo) Not(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDo) Or(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDo) Select(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDo) Where(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDo) Order(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDo) Distinct(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDo) Omit(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDo) Join(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDo) Group(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDo) Having(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDo) Limit(limit int) IUserDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDo) Offset(offset int) IUserDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDo) Unscoped() IUserDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDo) Create(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDo) CreateInBatches(values []*model.User, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDo) Save(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDo) First() (*model.User, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Take() (*model.User, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Last() (*model.User, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Find() ([]*model.User, error) {
	result, err := u.DO.Find()
	return result.([]*model.User), err
}

func (u userDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error) {
	buf := make([]*model.User, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDo) FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDo) Attrs(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDo) Assign(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDo) Joins(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDo) Preload(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDo) FirstOrInit() (*model.User, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FirstOrCreate() (*model.User, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FindByPage(offset int, limit int) (result []*model.User, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDo) Delete(models ...*model.User) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDo) withDO(do gen.Dao) *userDo {
	u.DO = *do.(*gen.DO)
	return u
}
