// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"time"

	"gorm.io/gorm"
)

const TableNameCommunityEvent = "community_events"

// CommunityEvent mapped from table <community_events>
type CommunityEvent struct {
	ID           string         `gorm:"column:id;type:uuid;primaryKey;default:gen_random_uuid()" json:"id"`
	CommunityID  *string        `gorm:"column:community_id;type:uuid;index:idx_community_events_community_id,priority:1" json:"community_id"`
	CreatorID    *string        `gorm:"column:creator_id;type:uuid;index:idx_community_events_creator_id,priority:1" json:"creator_id"`
	Title        string         `gorm:"column:title;type:character varying(200);not null" json:"title"`
	Description  *string        `gorm:"column:description;type:text" json:"description"`
	Location     *string        `gorm:"column:location;type:character varying(255)" json:"location"`
	IsOnline     bool           `gorm:"column:is_online;type:boolean;not null" json:"is_online"`
	StartTime    time.Time      `gorm:"column:start_time;type:timestamp with time zone;not null" json:"start_time"`
	EndTime      *time.Time     `gorm:"column:end_time;type:timestamp with time zone" json:"end_time"`
	MaxAttendees *int32         `gorm:"column:max_attendees;type:integer" json:"max_attendees"`
	ImageURL     *string        `gorm:"column:image_url;type:character varying(255)" json:"image_url"`
	CreatedAt    time.Time      `gorm:"column:created_at;type:timestamp with time zone;not null;default:now()" json:"created_at"`
	UpdatedAt    time.Time      `gorm:"column:updated_at;type:timestamp with time zone;not null;default:now()" json:"updated_at"`
	DeletedAt    gorm.DeletedAt `gorm:"column:deleted_at;type:timestamp with time zone" json:"deleted_at"`
}

// TableName CommunityEvent's table name
func (*CommunityEvent) TableName() string {
	return TableNameCommunityEvent
}
