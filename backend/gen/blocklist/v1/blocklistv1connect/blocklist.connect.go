// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blocklist/v1/blocklist.proto

package blocklistv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AI1411/m_app/gen/blocklist/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BlocklistServiceName is the fully-qualified name of the BlocklistService service.
	BlocklistServiceName = "blocklist.v1.BlocklistService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BlocklistServiceBlockUserProcedure is the fully-qualified name of the BlocklistService's
	// BlockUser RPC.
	BlocklistServiceBlockUserProcedure = "/blocklist.v1.BlocklistService/BlockUser"
	// BlocklistServiceUnblockUserProcedure is the fully-qualified name of the BlocklistService's
	// UnblockUser RPC.
	BlocklistServiceUnblockUserProcedure = "/blocklist.v1.BlocklistService/UnblockUser"
	// BlocklistServiceGetBlockedUsersProcedure is the fully-qualified name of the BlocklistService's
	// GetBlockedUsers RPC.
	BlocklistServiceGetBlockedUsersProcedure = "/blocklist.v1.BlocklistService/GetBlockedUsers"
	// BlocklistServiceCheckIfUserIsBlockedByTargetProcedure is the fully-qualified name of the
	// BlocklistService's CheckIfUserIsBlockedByTarget RPC.
	BlocklistServiceCheckIfUserIsBlockedByTargetProcedure = "/blocklist.v1.BlocklistService/CheckIfUserIsBlockedByTarget"
	// BlocklistServiceCheckIfUserHasBlockedTargetProcedure is the fully-qualified name of the
	// BlocklistService's CheckIfUserHasBlockedTarget RPC.
	BlocklistServiceCheckIfUserHasBlockedTargetProcedure = "/blocklist.v1.BlocklistService/CheckIfUserHasBlockedTarget"
)

// BlocklistServiceClient is a client for the blocklist.v1.BlocklistService service.
type BlocklistServiceClient interface {
	// ユーザーをブロックする
	BlockUser(context.Context, *connect.Request[v1.BlockUserRequest]) (*connect.Response[v1.BlockUserResponse], error)
	// ユーザーのブロックを解除する
	UnblockUser(context.Context, *connect.Request[v1.UnblockUserRequest]) (*connect.Response[v1.UnblockUserResponse], error)
	// 特定のユーザーがブロックしているユーザーのリストを取得する
	GetBlockedUsers(context.Context, *connect.Request[v1.GetBlockedUsersRequest]) (*connect.Response[v1.GetBlockedUsersResponse], error)
	// 指定したユーザーが、もう一方のユーザーによってブロックされているか確認する
	// (例: AさんがBさんにブロックされているかを確認)
	CheckIfUserIsBlockedByTarget(context.Context, *connect.Request[v1.CheckIfUserIsBlockedByTargetRequest]) (*connect.Response[v1.CheckIfUserIsBlockedByTargetResponse], error)
	// 指定したユーザーが、もう一方のユーザーをブロックしているか確認する
	// (例: AさんがBさんをブロックしているかを確認)
	CheckIfUserHasBlockedTarget(context.Context, *connect.Request[v1.CheckIfUserHasBlockedTargetRequest]) (*connect.Response[v1.CheckIfUserHasBlockedTargetResponse], error)
}

// NewBlocklistServiceClient constructs a client for the blocklist.v1.BlocklistService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBlocklistServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BlocklistServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	blocklistServiceMethods := v1.File_blocklist_v1_blocklist_proto.Services().ByName("BlocklistService").Methods()
	return &blocklistServiceClient{
		blockUser: connect.NewClient[v1.BlockUserRequest, v1.BlockUserResponse](
			httpClient,
			baseURL+BlocklistServiceBlockUserProcedure,
			connect.WithSchema(blocklistServiceMethods.ByName("BlockUser")),
			connect.WithClientOptions(opts...),
		),
		unblockUser: connect.NewClient[v1.UnblockUserRequest, v1.UnblockUserResponse](
			httpClient,
			baseURL+BlocklistServiceUnblockUserProcedure,
			connect.WithSchema(blocklistServiceMethods.ByName("UnblockUser")),
			connect.WithClientOptions(opts...),
		),
		getBlockedUsers: connect.NewClient[v1.GetBlockedUsersRequest, v1.GetBlockedUsersResponse](
			httpClient,
			baseURL+BlocklistServiceGetBlockedUsersProcedure,
			connect.WithSchema(blocklistServiceMethods.ByName("GetBlockedUsers")),
			connect.WithClientOptions(opts...),
		),
		checkIfUserIsBlockedByTarget: connect.NewClient[v1.CheckIfUserIsBlockedByTargetRequest, v1.CheckIfUserIsBlockedByTargetResponse](
			httpClient,
			baseURL+BlocklistServiceCheckIfUserIsBlockedByTargetProcedure,
			connect.WithSchema(blocklistServiceMethods.ByName("CheckIfUserIsBlockedByTarget")),
			connect.WithClientOptions(opts...),
		),
		checkIfUserHasBlockedTarget: connect.NewClient[v1.CheckIfUserHasBlockedTargetRequest, v1.CheckIfUserHasBlockedTargetResponse](
			httpClient,
			baseURL+BlocklistServiceCheckIfUserHasBlockedTargetProcedure,
			connect.WithSchema(blocklistServiceMethods.ByName("CheckIfUserHasBlockedTarget")),
			connect.WithClientOptions(opts...),
		),
	}
}

// blocklistServiceClient implements BlocklistServiceClient.
type blocklistServiceClient struct {
	blockUser                    *connect.Client[v1.BlockUserRequest, v1.BlockUserResponse]
	unblockUser                  *connect.Client[v1.UnblockUserRequest, v1.UnblockUserResponse]
	getBlockedUsers              *connect.Client[v1.GetBlockedUsersRequest, v1.GetBlockedUsersResponse]
	checkIfUserIsBlockedByTarget *connect.Client[v1.CheckIfUserIsBlockedByTargetRequest, v1.CheckIfUserIsBlockedByTargetResponse]
	checkIfUserHasBlockedTarget  *connect.Client[v1.CheckIfUserHasBlockedTargetRequest, v1.CheckIfUserHasBlockedTargetResponse]
}

// BlockUser calls blocklist.v1.BlocklistService.BlockUser.
func (c *blocklistServiceClient) BlockUser(ctx context.Context, req *connect.Request[v1.BlockUserRequest]) (*connect.Response[v1.BlockUserResponse], error) {
	return c.blockUser.CallUnary(ctx, req)
}

// UnblockUser calls blocklist.v1.BlocklistService.UnblockUser.
func (c *blocklistServiceClient) UnblockUser(ctx context.Context, req *connect.Request[v1.UnblockUserRequest]) (*connect.Response[v1.UnblockUserResponse], error) {
	return c.unblockUser.CallUnary(ctx, req)
}

// GetBlockedUsers calls blocklist.v1.BlocklistService.GetBlockedUsers.
func (c *blocklistServiceClient) GetBlockedUsers(ctx context.Context, req *connect.Request[v1.GetBlockedUsersRequest]) (*connect.Response[v1.GetBlockedUsersResponse], error) {
	return c.getBlockedUsers.CallUnary(ctx, req)
}

// CheckIfUserIsBlockedByTarget calls blocklist.v1.BlocklistService.CheckIfUserIsBlockedByTarget.
func (c *blocklistServiceClient) CheckIfUserIsBlockedByTarget(ctx context.Context, req *connect.Request[v1.CheckIfUserIsBlockedByTargetRequest]) (*connect.Response[v1.CheckIfUserIsBlockedByTargetResponse], error) {
	return c.checkIfUserIsBlockedByTarget.CallUnary(ctx, req)
}

// CheckIfUserHasBlockedTarget calls blocklist.v1.BlocklistService.CheckIfUserHasBlockedTarget.
func (c *blocklistServiceClient) CheckIfUserHasBlockedTarget(ctx context.Context, req *connect.Request[v1.CheckIfUserHasBlockedTargetRequest]) (*connect.Response[v1.CheckIfUserHasBlockedTargetResponse], error) {
	return c.checkIfUserHasBlockedTarget.CallUnary(ctx, req)
}

// BlocklistServiceHandler is an implementation of the blocklist.v1.BlocklistService service.
type BlocklistServiceHandler interface {
	// ユーザーをブロックする
	BlockUser(context.Context, *connect.Request[v1.BlockUserRequest]) (*connect.Response[v1.BlockUserResponse], error)
	// ユーザーのブロックを解除する
	UnblockUser(context.Context, *connect.Request[v1.UnblockUserRequest]) (*connect.Response[v1.UnblockUserResponse], error)
	// 特定のユーザーがブロックしているユーザーのリストを取得する
	GetBlockedUsers(context.Context, *connect.Request[v1.GetBlockedUsersRequest]) (*connect.Response[v1.GetBlockedUsersResponse], error)
	// 指定したユーザーが、もう一方のユーザーによってブロックされているか確認する
	// (例: AさんがBさんにブロックされているかを確認)
	CheckIfUserIsBlockedByTarget(context.Context, *connect.Request[v1.CheckIfUserIsBlockedByTargetRequest]) (*connect.Response[v1.CheckIfUserIsBlockedByTargetResponse], error)
	// 指定したユーザーが、もう一方のユーザーをブロックしているか確認する
	// (例: AさんがBさんをブロックしているかを確認)
	CheckIfUserHasBlockedTarget(context.Context, *connect.Request[v1.CheckIfUserHasBlockedTargetRequest]) (*connect.Response[v1.CheckIfUserHasBlockedTargetResponse], error)
}

// NewBlocklistServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBlocklistServiceHandler(svc BlocklistServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	blocklistServiceMethods := v1.File_blocklist_v1_blocklist_proto.Services().ByName("BlocklistService").Methods()
	blocklistServiceBlockUserHandler := connect.NewUnaryHandler(
		BlocklistServiceBlockUserProcedure,
		svc.BlockUser,
		connect.WithSchema(blocklistServiceMethods.ByName("BlockUser")),
		connect.WithHandlerOptions(opts...),
	)
	blocklistServiceUnblockUserHandler := connect.NewUnaryHandler(
		BlocklistServiceUnblockUserProcedure,
		svc.UnblockUser,
		connect.WithSchema(blocklistServiceMethods.ByName("UnblockUser")),
		connect.WithHandlerOptions(opts...),
	)
	blocklistServiceGetBlockedUsersHandler := connect.NewUnaryHandler(
		BlocklistServiceGetBlockedUsersProcedure,
		svc.GetBlockedUsers,
		connect.WithSchema(blocklistServiceMethods.ByName("GetBlockedUsers")),
		connect.WithHandlerOptions(opts...),
	)
	blocklistServiceCheckIfUserIsBlockedByTargetHandler := connect.NewUnaryHandler(
		BlocklistServiceCheckIfUserIsBlockedByTargetProcedure,
		svc.CheckIfUserIsBlockedByTarget,
		connect.WithSchema(blocklistServiceMethods.ByName("CheckIfUserIsBlockedByTarget")),
		connect.WithHandlerOptions(opts...),
	)
	blocklistServiceCheckIfUserHasBlockedTargetHandler := connect.NewUnaryHandler(
		BlocklistServiceCheckIfUserHasBlockedTargetProcedure,
		svc.CheckIfUserHasBlockedTarget,
		connect.WithSchema(blocklistServiceMethods.ByName("CheckIfUserHasBlockedTarget")),
		connect.WithHandlerOptions(opts...),
	)
	return "/blocklist.v1.BlocklistService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BlocklistServiceBlockUserProcedure:
			blocklistServiceBlockUserHandler.ServeHTTP(w, r)
		case BlocklistServiceUnblockUserProcedure:
			blocklistServiceUnblockUserHandler.ServeHTTP(w, r)
		case BlocklistServiceGetBlockedUsersProcedure:
			blocklistServiceGetBlockedUsersHandler.ServeHTTP(w, r)
		case BlocklistServiceCheckIfUserIsBlockedByTargetProcedure:
			blocklistServiceCheckIfUserIsBlockedByTargetHandler.ServeHTTP(w, r)
		case BlocklistServiceCheckIfUserHasBlockedTargetProcedure:
			blocklistServiceCheckIfUserHasBlockedTargetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBlocklistServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBlocklistServiceHandler struct{}

func (UnimplementedBlocklistServiceHandler) BlockUser(context.Context, *connect.Request[v1.BlockUserRequest]) (*connect.Response[v1.BlockUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blocklist.v1.BlocklistService.BlockUser is not implemented"))
}

func (UnimplementedBlocklistServiceHandler) UnblockUser(context.Context, *connect.Request[v1.UnblockUserRequest]) (*connect.Response[v1.UnblockUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blocklist.v1.BlocklistService.UnblockUser is not implemented"))
}

func (UnimplementedBlocklistServiceHandler) GetBlockedUsers(context.Context, *connect.Request[v1.GetBlockedUsersRequest]) (*connect.Response[v1.GetBlockedUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blocklist.v1.BlocklistService.GetBlockedUsers is not implemented"))
}

func (UnimplementedBlocklistServiceHandler) CheckIfUserIsBlockedByTarget(context.Context, *connect.Request[v1.CheckIfUserIsBlockedByTargetRequest]) (*connect.Response[v1.CheckIfUserIsBlockedByTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blocklist.v1.BlocklistService.CheckIfUserIsBlockedByTarget is not implemented"))
}

func (UnimplementedBlocklistServiceHandler) CheckIfUserHasBlockedTarget(context.Context, *connect.Request[v1.CheckIfUserHasBlockedTargetRequest]) (*connect.Response[v1.CheckIfUserHasBlockedTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blocklist.v1.BlocklistService.CheckIfUserHasBlockedTarget is not implemented"))
}
