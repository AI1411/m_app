// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: blocklist/v1/blocklist.proto

package blocklistv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ユーザーをブロックした際のエントリ情報（BlockUserのレスポンスとしても利用）
type BlockUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                              // ブロックリストエントリID (UUIDなどを想定)
	BlockerUserId string                 `protobuf:"bytes,2,opt,name=blocker_user_id,json=blockerUserId,proto3" json:"blocker_user_id,omitempty"` // ブロックしたユーザーID
	BlockedUserId string                 `protobuf:"bytes,3,opt,name=blocked_user_id,json=blockedUserId,proto3" json:"blocked_user_id,omitempty"` // ブロックされたユーザーID
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`               // ブロック日時
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockUserResponse) Reset() {
	*x = BlockUserResponse{}
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserResponse) ProtoMessage() {}

func (x *BlockUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserResponse.ProtoReflect.Descriptor instead.
func (*BlockUserResponse) Descriptor() ([]byte, []int) {
	return file_blocklist_v1_blocklist_proto_rawDescGZIP(), []int{0}
}

func (x *BlockUserResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockUserResponse) GetBlockerUserId() string {
	if x != nil {
		return x.BlockerUserId
	}
	return ""
}

func (x *BlockUserResponse) GetBlockedUserId() string {
	if x != nil {
		return x.BlockedUserId
	}
	return ""
}

func (x *BlockUserResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// ユーザーをブロックするリクエスト
type BlockUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockerUserId string                 `protobuf:"bytes,1,opt,name=blocker_user_id,json=blockerUserId,proto3" json:"blocker_user_id,omitempty"` // ブロックする側のユーザーID
	BlockedUserId string                 `protobuf:"bytes,2,opt,name=blocked_user_id,json=blockedUserId,proto3" json:"blocked_user_id,omitempty"` // ブロックされる側のユーザーID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockUserRequest) Reset() {
	*x = BlockUserRequest{}
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserRequest) ProtoMessage() {}

func (x *BlockUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserRequest.ProtoReflect.Descriptor instead.
func (*BlockUserRequest) Descriptor() ([]byte, []int) {
	return file_blocklist_v1_blocklist_proto_rawDescGZIP(), []int{1}
}

func (x *BlockUserRequest) GetBlockerUserId() string {
	if x != nil {
		return x.BlockerUserId
	}
	return ""
}

func (x *BlockUserRequest) GetBlockedUserId() string {
	if x != nil {
		return x.BlockedUserId
	}
	return ""
}

// ユーザーブロック解除リクエスト
type UnblockUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockerUserId string                 `protobuf:"bytes,1,opt,name=blocker_user_id,json=blockerUserId,proto3" json:"blocker_user_id,omitempty"` // ブロックを解除する側のユーザーID
	BlockedUserId string                 `protobuf:"bytes,2,opt,name=blocked_user_id,json=blockedUserId,proto3" json:"blocked_user_id,omitempty"` // ブロックを解除される側のユーザーID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnblockUserRequest) Reset() {
	*x = UnblockUserRequest{}
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnblockUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockUserRequest) ProtoMessage() {}

func (x *UnblockUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockUserRequest.ProtoReflect.Descriptor instead.
func (*UnblockUserRequest) Descriptor() ([]byte, []int) {
	return file_blocklist_v1_blocklist_proto_rawDescGZIP(), []int{2}
}

func (x *UnblockUserRequest) GetBlockerUserId() string {
	if x != nil {
		return x.BlockerUserId
	}
	return ""
}

func (x *UnblockUserRequest) GetBlockedUserId() string {
	if x != nil {
		return x.BlockedUserId
	}
	return ""
}

// ユーザーブロック解除レスポンス (Emptyの代わりに明示的な型を使用)
type UnblockUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnblockUserResponse) Reset() {
	*x = UnblockUserResponse{}
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnblockUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockUserResponse) ProtoMessage() {}

func (x *UnblockUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockUserResponse.ProtoReflect.Descriptor instead.
func (*UnblockUserResponse) Descriptor() ([]byte, []int) {
	return file_blocklist_v1_blocklist_proto_rawDescGZIP(), []int{3}
}

// 特定のユーザーがブロックしているユーザーリストを取得するリクエスト
type GetBlockedUsersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // ブロックリストを取得したいユーザーID
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`   // 1ページあたりのアイテム数
	PageToken     string                 `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"` // 次のページを取得するためのトークン
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockedUsersRequest) Reset() {
	*x = GetBlockedUsersRequest{}
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockedUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockedUsersRequest) ProtoMessage() {}

func (x *GetBlockedUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockedUsersRequest.ProtoReflect.Descriptor instead.
func (*GetBlockedUsersRequest) Descriptor() ([]byte, []int) {
	return file_blocklist_v1_blocklist_proto_rawDescGZIP(), []int{4}
}

func (x *GetBlockedUsersRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetBlockedUsersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetBlockedUsersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// 特定のユーザーがブロックしているユーザーリストのレスポンス
type GetBlockedUsersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockedUsers  []*BlockUserResponse   `protobuf:"bytes,1,rep,name=blocked_users,json=blockedUsers,proto3" json:"blocked_users,omitempty"`      // ブロックしているユーザーのリスト (BlockUserResponseを再利用)
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"` // 次のページがある場合のトークン
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockedUsersResponse) Reset() {
	*x = GetBlockedUsersResponse{}
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockedUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockedUsersResponse) ProtoMessage() {}

func (x *GetBlockedUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockedUsersResponse.ProtoReflect.Descriptor instead.
func (*GetBlockedUsersResponse) Descriptor() ([]byte, []int) {
	return file_blocklist_v1_blocklist_proto_rawDescGZIP(), []int{5}
}

func (x *GetBlockedUsersResponse) GetBlockedUsers() []*BlockUserResponse {
	if x != nil {
		return x.BlockedUsers
	}
	return nil
}

func (x *GetBlockedUsersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// 指定したユーザーが、対象ユーザーによってブロックされているか確認するリクエスト
type CheckIfUserIsBlockedByTargetRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CheckingUserId string                 `protobuf:"bytes,1,opt,name=checking_user_id,json=checkingUserId,proto3" json:"checking_user_id,omitempty"` // 確認するユーザーID (自分がブロックされているか確認したいユーザー)
	TargetUserId   string                 `protobuf:"bytes,2,opt,name=target_user_id,json=targetUserId,proto3" json:"target_user_id,omitempty"`       // 確認対象のユーザーID (相手が自分をブロックしているか確認したいユーザー)
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CheckIfUserIsBlockedByTargetRequest) Reset() {
	*x = CheckIfUserIsBlockedByTargetRequest{}
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckIfUserIsBlockedByTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIfUserIsBlockedByTargetRequest) ProtoMessage() {}

func (x *CheckIfUserIsBlockedByTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIfUserIsBlockedByTargetRequest.ProtoReflect.Descriptor instead.
func (*CheckIfUserIsBlockedByTargetRequest) Descriptor() ([]byte, []int) {
	return file_blocklist_v1_blocklist_proto_rawDescGZIP(), []int{6}
}

func (x *CheckIfUserIsBlockedByTargetRequest) GetCheckingUserId() string {
	if x != nil {
		return x.CheckingUserId
	}
	return ""
}

func (x *CheckIfUserIsBlockedByTargetRequest) GetTargetUserId() string {
	if x != nil {
		return x.TargetUserId
	}
	return ""
}

// 指定したユーザーが、対象ユーザーによってブロックされているか確認するレスポンス
type CheckIfUserIsBlockedByTargetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsBlocked     bool                   `protobuf:"varint,1,opt,name=is_blocked,json=isBlocked,proto3" json:"is_blocked,omitempty"` // ブロックされていれば true
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckIfUserIsBlockedByTargetResponse) Reset() {
	*x = CheckIfUserIsBlockedByTargetResponse{}
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckIfUserIsBlockedByTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIfUserIsBlockedByTargetResponse) ProtoMessage() {}

func (x *CheckIfUserIsBlockedByTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIfUserIsBlockedByTargetResponse.ProtoReflect.Descriptor instead.
func (*CheckIfUserIsBlockedByTargetResponse) Descriptor() ([]byte, []int) {
	return file_blocklist_v1_blocklist_proto_rawDescGZIP(), []int{7}
}

func (x *CheckIfUserIsBlockedByTargetResponse) GetIsBlocked() bool {
	if x != nil {
		return x.IsBlocked
	}
	return false
}

// 指定したユーザーが、対象ユーザーをブロックしているか確認するリクエスト
type CheckIfUserHasBlockedTargetRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CheckingUserId string                 `protobuf:"bytes,1,opt,name=checking_user_id,json=checkingUserId,proto3" json:"checking_user_id,omitempty"` // 確認するユーザーID (自分が相手をブロックしているか確認したいユーザー)
	TargetUserId   string                 `protobuf:"bytes,2,opt,name=target_user_id,json=targetUserId,proto3" json:"target_user_id,omitempty"`       // 確認対象のユーザーID (自分がブロックしているか確認したい相手ユーザー)
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CheckIfUserHasBlockedTargetRequest) Reset() {
	*x = CheckIfUserHasBlockedTargetRequest{}
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckIfUserHasBlockedTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIfUserHasBlockedTargetRequest) ProtoMessage() {}

func (x *CheckIfUserHasBlockedTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIfUserHasBlockedTargetRequest.ProtoReflect.Descriptor instead.
func (*CheckIfUserHasBlockedTargetRequest) Descriptor() ([]byte, []int) {
	return file_blocklist_v1_blocklist_proto_rawDescGZIP(), []int{8}
}

func (x *CheckIfUserHasBlockedTargetRequest) GetCheckingUserId() string {
	if x != nil {
		return x.CheckingUserId
	}
	return ""
}

func (x *CheckIfUserHasBlockedTargetRequest) GetTargetUserId() string {
	if x != nil {
		return x.TargetUserId
	}
	return ""
}

// 指定したユーザーが、対象ユーザーをブロックしているか確認するレスポンス
type CheckIfUserHasBlockedTargetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HasBlocked    bool                   `protobuf:"varint,1,opt,name=has_blocked,json=hasBlocked,proto3" json:"has_blocked,omitempty"` // ブロックしていれば true
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckIfUserHasBlockedTargetResponse) Reset() {
	*x = CheckIfUserHasBlockedTargetResponse{}
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckIfUserHasBlockedTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIfUserHasBlockedTargetResponse) ProtoMessage() {}

func (x *CheckIfUserHasBlockedTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocklist_v1_blocklist_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIfUserHasBlockedTargetResponse.ProtoReflect.Descriptor instead.
func (*CheckIfUserHasBlockedTargetResponse) Descriptor() ([]byte, []int) {
	return file_blocklist_v1_blocklist_proto_rawDescGZIP(), []int{9}
}

func (x *CheckIfUserHasBlockedTargetResponse) GetHasBlocked() bool {
	if x != nil {
		return x.HasBlocked
	}
	return false
}

var File_blocklist_v1_blocklist_proto protoreflect.FileDescriptor

const file_blocklist_v1_blocklist_proto_rawDesc = "" +
	"\n" +
	"\x1cblocklist/v1/blocklist.proto\x12\fblocklist.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xae\x01\n" +
	"\x11BlockUserResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12&\n" +
	"\x0fblocker_user_id\x18\x02 \x01(\tR\rblockerUserId\x12&\n" +
	"\x0fblocked_user_id\x18\x03 \x01(\tR\rblockedUserId\x129\n" +
	"\n" +
	"created_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\"b\n" +
	"\x10BlockUserRequest\x12&\n" +
	"\x0fblocker_user_id\x18\x01 \x01(\tR\rblockerUserId\x12&\n" +
	"\x0fblocked_user_id\x18\x02 \x01(\tR\rblockedUserId\"d\n" +
	"\x12UnblockUserRequest\x12&\n" +
	"\x0fblocker_user_id\x18\x01 \x01(\tR\rblockerUserId\x12&\n" +
	"\x0fblocked_user_id\x18\x02 \x01(\tR\rblockedUserId\"\x15\n" +
	"\x13UnblockUserResponse\"m\n" +
	"\x16GetBlockedUsersRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\"\x87\x01\n" +
	"\x17GetBlockedUsersResponse\x12D\n" +
	"\rblocked_users\x18\x01 \x03(\v2\x1f.blocklist.v1.BlockUserResponseR\fblockedUsers\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"u\n" +
	"#CheckIfUserIsBlockedByTargetRequest\x12(\n" +
	"\x10checking_user_id\x18\x01 \x01(\tR\x0echeckingUserId\x12$\n" +
	"\x0etarget_user_id\x18\x02 \x01(\tR\ftargetUserId\"E\n" +
	"$CheckIfUserIsBlockedByTargetResponse\x12\x1d\n" +
	"\n" +
	"is_blocked\x18\x01 \x01(\bR\tisBlocked\"t\n" +
	"\"CheckIfUserHasBlockedTargetRequest\x12(\n" +
	"\x10checking_user_id\x18\x01 \x01(\tR\x0echeckingUserId\x12$\n" +
	"\x0etarget_user_id\x18\x02 \x01(\tR\ftargetUserId\"F\n" +
	"#CheckIfUserHasBlockedTargetResponse\x12\x1f\n" +
	"\vhas_blocked\x18\x01 \x01(\bR\n" +
	"hasBlocked2\xa1\x04\n" +
	"\x10BlocklistService\x12L\n" +
	"\tBlockUser\x12\x1e.blocklist.v1.BlockUserRequest\x1a\x1f.blocklist.v1.BlockUserResponse\x12R\n" +
	"\vUnblockUser\x12 .blocklist.v1.UnblockUserRequest\x1a!.blocklist.v1.UnblockUserResponse\x12^\n" +
	"\x0fGetBlockedUsers\x12$.blocklist.v1.GetBlockedUsersRequest\x1a%.blocklist.v1.GetBlockedUsersResponse\x12\x85\x01\n" +
	"\x1cCheckIfUserIsBlockedByTarget\x121.blocklist.v1.CheckIfUserIsBlockedByTargetRequest\x1a2.blocklist.v1.CheckIfUserIsBlockedByTargetResponse\x12\x82\x01\n" +
	"\x1bCheckIfUserHasBlockedTarget\x120.blocklist.v1.CheckIfUserHasBlockedTargetRequest\x1a1.blocklist.v1.CheckIfUserHasBlockedTargetResponseB\xa9\x01\n" +
	"\x10com.blocklist.v1B\x0eBlocklistProtoP\x01Z4github.com/AI1411/m_app/gen/blocklist/v1;blocklistv1\xa2\x02\x03BXX\xaa\x02\fBlocklist.V1\xca\x02\fBlocklist\\V1\xe2\x02\x18Blocklist\\V1\\GPBMetadata\xea\x02\rBlocklist::V1b\x06proto3"

var (
	file_blocklist_v1_blocklist_proto_rawDescOnce sync.Once
	file_blocklist_v1_blocklist_proto_rawDescData []byte
)

func file_blocklist_v1_blocklist_proto_rawDescGZIP() []byte {
	file_blocklist_v1_blocklist_proto_rawDescOnce.Do(func() {
		file_blocklist_v1_blocklist_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_blocklist_v1_blocklist_proto_rawDesc), len(file_blocklist_v1_blocklist_proto_rawDesc)))
	})
	return file_blocklist_v1_blocklist_proto_rawDescData
}

var file_blocklist_v1_blocklist_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_blocklist_v1_blocklist_proto_goTypes = []any{
	(*BlockUserResponse)(nil),                    // 0: blocklist.v1.BlockUserResponse
	(*BlockUserRequest)(nil),                     // 1: blocklist.v1.BlockUserRequest
	(*UnblockUserRequest)(nil),                   // 2: blocklist.v1.UnblockUserRequest
	(*UnblockUserResponse)(nil),                  // 3: blocklist.v1.UnblockUserResponse
	(*GetBlockedUsersRequest)(nil),               // 4: blocklist.v1.GetBlockedUsersRequest
	(*GetBlockedUsersResponse)(nil),              // 5: blocklist.v1.GetBlockedUsersResponse
	(*CheckIfUserIsBlockedByTargetRequest)(nil),  // 6: blocklist.v1.CheckIfUserIsBlockedByTargetRequest
	(*CheckIfUserIsBlockedByTargetResponse)(nil), // 7: blocklist.v1.CheckIfUserIsBlockedByTargetResponse
	(*CheckIfUserHasBlockedTargetRequest)(nil),   // 8: blocklist.v1.CheckIfUserHasBlockedTargetRequest
	(*CheckIfUserHasBlockedTargetResponse)(nil),  // 9: blocklist.v1.CheckIfUserHasBlockedTargetResponse
	(*timestamppb.Timestamp)(nil),                // 10: google.protobuf.Timestamp
}
var file_blocklist_v1_blocklist_proto_depIdxs = []int32{
	10, // 0: blocklist.v1.BlockUserResponse.created_at:type_name -> google.protobuf.Timestamp
	0,  // 1: blocklist.v1.GetBlockedUsersResponse.blocked_users:type_name -> blocklist.v1.BlockUserResponse
	1,  // 2: blocklist.v1.BlocklistService.BlockUser:input_type -> blocklist.v1.BlockUserRequest
	2,  // 3: blocklist.v1.BlocklistService.UnblockUser:input_type -> blocklist.v1.UnblockUserRequest
	4,  // 4: blocklist.v1.BlocklistService.GetBlockedUsers:input_type -> blocklist.v1.GetBlockedUsersRequest
	6,  // 5: blocklist.v1.BlocklistService.CheckIfUserIsBlockedByTarget:input_type -> blocklist.v1.CheckIfUserIsBlockedByTargetRequest
	8,  // 6: blocklist.v1.BlocklistService.CheckIfUserHasBlockedTarget:input_type -> blocklist.v1.CheckIfUserHasBlockedTargetRequest
	0,  // 7: blocklist.v1.BlocklistService.BlockUser:output_type -> blocklist.v1.BlockUserResponse
	3,  // 8: blocklist.v1.BlocklistService.UnblockUser:output_type -> blocklist.v1.UnblockUserResponse
	5,  // 9: blocklist.v1.BlocklistService.GetBlockedUsers:output_type -> blocklist.v1.GetBlockedUsersResponse
	7,  // 10: blocklist.v1.BlocklistService.CheckIfUserIsBlockedByTarget:output_type -> blocklist.v1.CheckIfUserIsBlockedByTargetResponse
	9,  // 11: blocklist.v1.BlocklistService.CheckIfUserHasBlockedTarget:output_type -> blocklist.v1.CheckIfUserHasBlockedTargetResponse
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_blocklist_v1_blocklist_proto_init() }
func file_blocklist_v1_blocklist_proto_init() {
	if File_blocklist_v1_blocklist_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_blocklist_v1_blocklist_proto_rawDesc), len(file_blocklist_v1_blocklist_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blocklist_v1_blocklist_proto_goTypes,
		DependencyIndexes: file_blocklist_v1_blocklist_proto_depIdxs,
		MessageInfos:      file_blocklist_v1_blocklist_proto_msgTypes,
	}.Build()
	File_blocklist_v1_blocklist_proto = out.File
	file_blocklist_v1_blocklist_proto_goTypes = nil
	file_blocklist_v1_blocklist_proto_depIdxs = nil
}
