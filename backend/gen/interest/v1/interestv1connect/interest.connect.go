// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: interest/v1/interest.proto

package interestv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AI1411/m_app/gen/interest/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InterestServiceName is the fully-qualified name of the InterestService service.
	InterestServiceName = "interest.v1.InterestService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InterestServiceListInterestsProcedure is the fully-qualified name of the InterestService's
	// ListInterests RPC.
	InterestServiceListInterestsProcedure = "/interest.v1.InterestService/ListInterests"
)

// InterestServiceClient is a client for the interest.v1.InterestService service.
type InterestServiceClient interface {
	// 興味・関心一覧取得
	ListInterests(context.Context, *connect.Request[v1.ListInterestsRequest]) (*connect.Response[v1.ListInterestsResponse], error)
}

// NewInterestServiceClient constructs a client for the interest.v1.InterestService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInterestServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InterestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	interestServiceMethods := v1.File_interest_v1_interest_proto.Services().ByName("InterestService").Methods()
	return &interestServiceClient{
		listInterests: connect.NewClient[v1.ListInterestsRequest, v1.ListInterestsResponse](
			httpClient,
			baseURL+InterestServiceListInterestsProcedure,
			connect.WithSchema(interestServiceMethods.ByName("ListInterests")),
			connect.WithClientOptions(opts...),
		),
	}
}

// interestServiceClient implements InterestServiceClient.
type interestServiceClient struct {
	listInterests *connect.Client[v1.ListInterestsRequest, v1.ListInterestsResponse]
}

// ListInterests calls interest.v1.InterestService.ListInterests.
func (c *interestServiceClient) ListInterests(ctx context.Context, req *connect.Request[v1.ListInterestsRequest]) (*connect.Response[v1.ListInterestsResponse], error) {
	return c.listInterests.CallUnary(ctx, req)
}

// InterestServiceHandler is an implementation of the interest.v1.InterestService service.
type InterestServiceHandler interface {
	// 興味・関心一覧取得
	ListInterests(context.Context, *connect.Request[v1.ListInterestsRequest]) (*connect.Response[v1.ListInterestsResponse], error)
}

// NewInterestServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInterestServiceHandler(svc InterestServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	interestServiceMethods := v1.File_interest_v1_interest_proto.Services().ByName("InterestService").Methods()
	interestServiceListInterestsHandler := connect.NewUnaryHandler(
		InterestServiceListInterestsProcedure,
		svc.ListInterests,
		connect.WithSchema(interestServiceMethods.ByName("ListInterests")),
		connect.WithHandlerOptions(opts...),
	)
	return "/interest.v1.InterestService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InterestServiceListInterestsProcedure:
			interestServiceListInterestsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInterestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInterestServiceHandler struct{}

func (UnimplementedInterestServiceHandler) ListInterests(context.Context, *connect.Request[v1.ListInterestsRequest]) (*connect.Response[v1.ListInterestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("interest.v1.InterestService.ListInterests is not implemented"))
}
