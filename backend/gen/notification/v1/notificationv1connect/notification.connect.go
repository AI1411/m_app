// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: notification/v1/notification.proto

package notificationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AI1411/m_app/gen/notification/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "notification.v1.NotificationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationServiceGetNotificationsProcedure is the fully-qualified name of the
	// NotificationService's GetNotifications RPC.
	NotificationServiceGetNotificationsProcedure = "/notification.v1.NotificationService/GetNotifications"
	// NotificationServiceMarkNotificationAsReadProcedure is the fully-qualified name of the
	// NotificationService's MarkNotificationAsRead RPC.
	NotificationServiceMarkNotificationAsReadProcedure = "/notification.v1.NotificationService/MarkNotificationAsRead"
	// NotificationServiceMarkAllNotificationsAsReadProcedure is the fully-qualified name of the
	// NotificationService's MarkAllNotificationsAsRead RPC.
	NotificationServiceMarkAllNotificationsAsReadProcedure = "/notification.v1.NotificationService/MarkAllNotificationsAsRead"
	// NotificationServiceCreateNotificationProcedure is the fully-qualified name of the
	// NotificationService's CreateNotification RPC.
	NotificationServiceCreateNotificationProcedure = "/notification.v1.NotificationService/CreateNotification"
	// NotificationServiceDeleteNotificationProcedure is the fully-qualified name of the
	// NotificationService's DeleteNotification RPC.
	NotificationServiceDeleteNotificationProcedure = "/notification.v1.NotificationService/DeleteNotification"
)

// NotificationServiceClient is a client for the notification.v1.NotificationService service.
type NotificationServiceClient interface {
	// ユーザーの通知リストを取得
	GetNotifications(context.Context, *connect.Request[v1.GetNotificationsRequest]) (*connect.Response[v1.GetNotificationsResponse], error)
	// 特定の通知を既読にする
	MarkNotificationAsRead(context.Context, *connect.Request[v1.MarkNotificationAsReadRequest]) (*connect.Response[v1.MarkNotificationAsReadResponse], error)
	// ユーザーの全通知を既読にする
	MarkAllNotificationsAsRead(context.Context, *connect.Request[v1.MarkAllNotificationsAsReadRequest]) (*connect.Response[v1.MarkAllNotificationsAsReadResponse], error)
	// 通知を作成する（システム管理者用）
	CreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error)
	// 通知を削除する
	DeleteNotification(context.Context, *connect.Request[v1.DeleteNotificationRequest]) (*connect.Response[v1.DeleteNotificationResponse], error)
}

// NewNotificationServiceClient constructs a client for the notification.v1.NotificationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	notificationServiceMethods := v1.File_notification_v1_notification_proto.Services().ByName("NotificationService").Methods()
	return &notificationServiceClient{
		getNotifications: connect.NewClient[v1.GetNotificationsRequest, v1.GetNotificationsResponse](
			httpClient,
			baseURL+NotificationServiceGetNotificationsProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("GetNotifications")),
			connect.WithClientOptions(opts...),
		),
		markNotificationAsRead: connect.NewClient[v1.MarkNotificationAsReadRequest, v1.MarkNotificationAsReadResponse](
			httpClient,
			baseURL+NotificationServiceMarkNotificationAsReadProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("MarkNotificationAsRead")),
			connect.WithClientOptions(opts...),
		),
		markAllNotificationsAsRead: connect.NewClient[v1.MarkAllNotificationsAsReadRequest, v1.MarkAllNotificationsAsReadResponse](
			httpClient,
			baseURL+NotificationServiceMarkAllNotificationsAsReadProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("MarkAllNotificationsAsRead")),
			connect.WithClientOptions(opts...),
		),
		createNotification: connect.NewClient[v1.CreateNotificationRequest, v1.CreateNotificationResponse](
			httpClient,
			baseURL+NotificationServiceCreateNotificationProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("CreateNotification")),
			connect.WithClientOptions(opts...),
		),
		deleteNotification: connect.NewClient[v1.DeleteNotificationRequest, v1.DeleteNotificationResponse](
			httpClient,
			baseURL+NotificationServiceDeleteNotificationProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("DeleteNotification")),
			connect.WithClientOptions(opts...),
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	getNotifications           *connect.Client[v1.GetNotificationsRequest, v1.GetNotificationsResponse]
	markNotificationAsRead     *connect.Client[v1.MarkNotificationAsReadRequest, v1.MarkNotificationAsReadResponse]
	markAllNotificationsAsRead *connect.Client[v1.MarkAllNotificationsAsReadRequest, v1.MarkAllNotificationsAsReadResponse]
	createNotification         *connect.Client[v1.CreateNotificationRequest, v1.CreateNotificationResponse]
	deleteNotification         *connect.Client[v1.DeleteNotificationRequest, v1.DeleteNotificationResponse]
}

// GetNotifications calls notification.v1.NotificationService.GetNotifications.
func (c *notificationServiceClient) GetNotifications(ctx context.Context, req *connect.Request[v1.GetNotificationsRequest]) (*connect.Response[v1.GetNotificationsResponse], error) {
	return c.getNotifications.CallUnary(ctx, req)
}

// MarkNotificationAsRead calls notification.v1.NotificationService.MarkNotificationAsRead.
func (c *notificationServiceClient) MarkNotificationAsRead(ctx context.Context, req *connect.Request[v1.MarkNotificationAsReadRequest]) (*connect.Response[v1.MarkNotificationAsReadResponse], error) {
	return c.markNotificationAsRead.CallUnary(ctx, req)
}

// MarkAllNotificationsAsRead calls notification.v1.NotificationService.MarkAllNotificationsAsRead.
func (c *notificationServiceClient) MarkAllNotificationsAsRead(ctx context.Context, req *connect.Request[v1.MarkAllNotificationsAsReadRequest]) (*connect.Response[v1.MarkAllNotificationsAsReadResponse], error) {
	return c.markAllNotificationsAsRead.CallUnary(ctx, req)
}

// CreateNotification calls notification.v1.NotificationService.CreateNotification.
func (c *notificationServiceClient) CreateNotification(ctx context.Context, req *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error) {
	return c.createNotification.CallUnary(ctx, req)
}

// DeleteNotification calls notification.v1.NotificationService.DeleteNotification.
func (c *notificationServiceClient) DeleteNotification(ctx context.Context, req *connect.Request[v1.DeleteNotificationRequest]) (*connect.Response[v1.DeleteNotificationResponse], error) {
	return c.deleteNotification.CallUnary(ctx, req)
}

// NotificationServiceHandler is an implementation of the notification.v1.NotificationService
// service.
type NotificationServiceHandler interface {
	// ユーザーの通知リストを取得
	GetNotifications(context.Context, *connect.Request[v1.GetNotificationsRequest]) (*connect.Response[v1.GetNotificationsResponse], error)
	// 特定の通知を既読にする
	MarkNotificationAsRead(context.Context, *connect.Request[v1.MarkNotificationAsReadRequest]) (*connect.Response[v1.MarkNotificationAsReadResponse], error)
	// ユーザーの全通知を既読にする
	MarkAllNotificationsAsRead(context.Context, *connect.Request[v1.MarkAllNotificationsAsReadRequest]) (*connect.Response[v1.MarkAllNotificationsAsReadResponse], error)
	// 通知を作成する（システム管理者用）
	CreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error)
	// 通知を削除する
	DeleteNotification(context.Context, *connect.Request[v1.DeleteNotificationRequest]) (*connect.Response[v1.DeleteNotificationResponse], error)
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notificationServiceMethods := v1.File_notification_v1_notification_proto.Services().ByName("NotificationService").Methods()
	notificationServiceGetNotificationsHandler := connect.NewUnaryHandler(
		NotificationServiceGetNotificationsProcedure,
		svc.GetNotifications,
		connect.WithSchema(notificationServiceMethods.ByName("GetNotifications")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceMarkNotificationAsReadHandler := connect.NewUnaryHandler(
		NotificationServiceMarkNotificationAsReadProcedure,
		svc.MarkNotificationAsRead,
		connect.WithSchema(notificationServiceMethods.ByName("MarkNotificationAsRead")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceMarkAllNotificationsAsReadHandler := connect.NewUnaryHandler(
		NotificationServiceMarkAllNotificationsAsReadProcedure,
		svc.MarkAllNotificationsAsRead,
		connect.WithSchema(notificationServiceMethods.ByName("MarkAllNotificationsAsRead")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceCreateNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceCreateNotificationProcedure,
		svc.CreateNotification,
		connect.WithSchema(notificationServiceMethods.ByName("CreateNotification")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceDeleteNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceDeleteNotificationProcedure,
		svc.DeleteNotification,
		connect.WithSchema(notificationServiceMethods.ByName("DeleteNotification")),
		connect.WithHandlerOptions(opts...),
	)
	return "/notification.v1.NotificationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationServiceGetNotificationsProcedure:
			notificationServiceGetNotificationsHandler.ServeHTTP(w, r)
		case NotificationServiceMarkNotificationAsReadProcedure:
			notificationServiceMarkNotificationAsReadHandler.ServeHTTP(w, r)
		case NotificationServiceMarkAllNotificationsAsReadProcedure:
			notificationServiceMarkAllNotificationsAsReadHandler.ServeHTTP(w, r)
		case NotificationServiceCreateNotificationProcedure:
			notificationServiceCreateNotificationHandler.ServeHTTP(w, r)
		case NotificationServiceDeleteNotificationProcedure:
			notificationServiceDeleteNotificationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) GetNotifications(context.Context, *connect.Request[v1.GetNotificationsRequest]) (*connect.Response[v1.GetNotificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("notification.v1.NotificationService.GetNotifications is not implemented"))
}

func (UnimplementedNotificationServiceHandler) MarkNotificationAsRead(context.Context, *connect.Request[v1.MarkNotificationAsReadRequest]) (*connect.Response[v1.MarkNotificationAsReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("notification.v1.NotificationService.MarkNotificationAsRead is not implemented"))
}

func (UnimplementedNotificationServiceHandler) MarkAllNotificationsAsRead(context.Context, *connect.Request[v1.MarkAllNotificationsAsReadRequest]) (*connect.Response[v1.MarkAllNotificationsAsReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("notification.v1.NotificationService.MarkAllNotificationsAsRead is not implemented"))
}

func (UnimplementedNotificationServiceHandler) CreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("notification.v1.NotificationService.CreateNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) DeleteNotification(context.Context, *connect.Request[v1.DeleteNotificationRequest]) (*connect.Response[v1.DeleteNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("notification.v1.NotificationService.DeleteNotification is not implemented"))
}
