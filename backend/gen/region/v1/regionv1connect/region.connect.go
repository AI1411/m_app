// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: region/v1/region.proto

package regionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AI1411/m_app/gen/region/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RegionServiceName is the fully-qualified name of the RegionService service.
	RegionServiceName = "region.v1.RegionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RegionServiceListRegionsProcedure is the fully-qualified name of the RegionService's ListRegions
	// RPC.
	RegionServiceListRegionsProcedure = "/region.v1.RegionService/ListRegions"
)

// RegionServiceClient is a client for the region.v1.RegionService service.
type RegionServiceClient interface {
	// リージョン一覧取得
	ListRegions(context.Context, *connect.Request[v1.ListRegionsRequest]) (*connect.Response[v1.ListRegionsResponse], error)
}

// NewRegionServiceClient constructs a client for the region.v1.RegionService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRegionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RegionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	regionServiceMethods := v1.File_region_v1_region_proto.Services().ByName("RegionService").Methods()
	return &regionServiceClient{
		listRegions: connect.NewClient[v1.ListRegionsRequest, v1.ListRegionsResponse](
			httpClient,
			baseURL+RegionServiceListRegionsProcedure,
			connect.WithSchema(regionServiceMethods.ByName("ListRegions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// regionServiceClient implements RegionServiceClient.
type regionServiceClient struct {
	listRegions *connect.Client[v1.ListRegionsRequest, v1.ListRegionsResponse]
}

// ListRegions calls region.v1.RegionService.ListRegions.
func (c *regionServiceClient) ListRegions(ctx context.Context, req *connect.Request[v1.ListRegionsRequest]) (*connect.Response[v1.ListRegionsResponse], error) {
	return c.listRegions.CallUnary(ctx, req)
}

// RegionServiceHandler is an implementation of the region.v1.RegionService service.
type RegionServiceHandler interface {
	// リージョン一覧取得
	ListRegions(context.Context, *connect.Request[v1.ListRegionsRequest]) (*connect.Response[v1.ListRegionsResponse], error)
}

// NewRegionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRegionServiceHandler(svc RegionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	regionServiceMethods := v1.File_region_v1_region_proto.Services().ByName("RegionService").Methods()
	regionServiceListRegionsHandler := connect.NewUnaryHandler(
		RegionServiceListRegionsProcedure,
		svc.ListRegions,
		connect.WithSchema(regionServiceMethods.ByName("ListRegions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/region.v1.RegionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RegionServiceListRegionsProcedure:
			regionServiceListRegionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRegionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRegionServiceHandler struct{}

func (UnimplementedRegionServiceHandler) ListRegions(context.Context, *connect.Request[v1.ListRegionsRequest]) (*connect.Response[v1.ListRegionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("region.v1.RegionService.ListRegions is not implemented"))
}
