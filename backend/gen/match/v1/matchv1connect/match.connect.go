// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: match/v1/match.proto

package matchv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AI1411/m_app/gen/match/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MatchServiceName is the fully-qualified name of the MatchService service.
	MatchServiceName = "match.v1.MatchService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MatchServiceCreateMatchProcedure is the fully-qualified name of the MatchService's CreateMatch
	// RPC.
	MatchServiceCreateMatchProcedure = "/match.v1.MatchService/CreateMatch"
	// MatchServiceGetUserMatchesProcedure is the fully-qualified name of the MatchService's
	// GetUserMatches RPC.
	MatchServiceGetUserMatchesProcedure = "/match.v1.MatchService/GetUserMatches"
	// MatchServiceDeleteMatchProcedure is the fully-qualified name of the MatchService's DeleteMatch
	// RPC.
	MatchServiceDeleteMatchProcedure = "/match.v1.MatchService/DeleteMatch"
	// MatchServiceCheckMatchProcedure is the fully-qualified name of the MatchService's CheckMatch RPC.
	MatchServiceCheckMatchProcedure = "/match.v1.MatchService/CheckMatch"
)

// MatchServiceClient is a client for the match.v1.MatchService service.
type MatchServiceClient interface {
	// マッチング作成（お互いにいいねを送り合った場合に成立）
	CreateMatch(context.Context, *connect.Request[v1.CreateMatchRequest]) (*connect.Response[v1.CreateMatchResponse], error)
	// ユーザーのマッチング一覧取得
	GetUserMatches(context.Context, *connect.Request[v1.GetUserMatchesRequest]) (*connect.Response[v1.GetUserMatchesResponse], error)
	// マッチング削除（マッチング解除）
	DeleteMatch(context.Context, *connect.Request[v1.DeleteMatchRequest]) (*connect.Response[v1.DeleteMatchResponse], error)
	// マッチングチェック（2人のユーザー間にマッチングが存在するか）
	CheckMatch(context.Context, *connect.Request[v1.CheckMatchRequest]) (*connect.Response[v1.CheckMatchResponse], error)
}

// NewMatchServiceClient constructs a client for the match.v1.MatchService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMatchServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MatchServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	matchServiceMethods := v1.File_match_v1_match_proto.Services().ByName("MatchService").Methods()
	return &matchServiceClient{
		createMatch: connect.NewClient[v1.CreateMatchRequest, v1.CreateMatchResponse](
			httpClient,
			baseURL+MatchServiceCreateMatchProcedure,
			connect.WithSchema(matchServiceMethods.ByName("CreateMatch")),
			connect.WithClientOptions(opts...),
		),
		getUserMatches: connect.NewClient[v1.GetUserMatchesRequest, v1.GetUserMatchesResponse](
			httpClient,
			baseURL+MatchServiceGetUserMatchesProcedure,
			connect.WithSchema(matchServiceMethods.ByName("GetUserMatches")),
			connect.WithClientOptions(opts...),
		),
		deleteMatch: connect.NewClient[v1.DeleteMatchRequest, v1.DeleteMatchResponse](
			httpClient,
			baseURL+MatchServiceDeleteMatchProcedure,
			connect.WithSchema(matchServiceMethods.ByName("DeleteMatch")),
			connect.WithClientOptions(opts...),
		),
		checkMatch: connect.NewClient[v1.CheckMatchRequest, v1.CheckMatchResponse](
			httpClient,
			baseURL+MatchServiceCheckMatchProcedure,
			connect.WithSchema(matchServiceMethods.ByName("CheckMatch")),
			connect.WithClientOptions(opts...),
		),
	}
}

// matchServiceClient implements MatchServiceClient.
type matchServiceClient struct {
	createMatch    *connect.Client[v1.CreateMatchRequest, v1.CreateMatchResponse]
	getUserMatches *connect.Client[v1.GetUserMatchesRequest, v1.GetUserMatchesResponse]
	deleteMatch    *connect.Client[v1.DeleteMatchRequest, v1.DeleteMatchResponse]
	checkMatch     *connect.Client[v1.CheckMatchRequest, v1.CheckMatchResponse]
}

// CreateMatch calls match.v1.MatchService.CreateMatch.
func (c *matchServiceClient) CreateMatch(ctx context.Context, req *connect.Request[v1.CreateMatchRequest]) (*connect.Response[v1.CreateMatchResponse], error) {
	return c.createMatch.CallUnary(ctx, req)
}

// GetUserMatches calls match.v1.MatchService.GetUserMatches.
func (c *matchServiceClient) GetUserMatches(ctx context.Context, req *connect.Request[v1.GetUserMatchesRequest]) (*connect.Response[v1.GetUserMatchesResponse], error) {
	return c.getUserMatches.CallUnary(ctx, req)
}

// DeleteMatch calls match.v1.MatchService.DeleteMatch.
func (c *matchServiceClient) DeleteMatch(ctx context.Context, req *connect.Request[v1.DeleteMatchRequest]) (*connect.Response[v1.DeleteMatchResponse], error) {
	return c.deleteMatch.CallUnary(ctx, req)
}

// CheckMatch calls match.v1.MatchService.CheckMatch.
func (c *matchServiceClient) CheckMatch(ctx context.Context, req *connect.Request[v1.CheckMatchRequest]) (*connect.Response[v1.CheckMatchResponse], error) {
	return c.checkMatch.CallUnary(ctx, req)
}

// MatchServiceHandler is an implementation of the match.v1.MatchService service.
type MatchServiceHandler interface {
	// マッチング作成（お互いにいいねを送り合った場合に成立）
	CreateMatch(context.Context, *connect.Request[v1.CreateMatchRequest]) (*connect.Response[v1.CreateMatchResponse], error)
	// ユーザーのマッチング一覧取得
	GetUserMatches(context.Context, *connect.Request[v1.GetUserMatchesRequest]) (*connect.Response[v1.GetUserMatchesResponse], error)
	// マッチング削除（マッチング解除）
	DeleteMatch(context.Context, *connect.Request[v1.DeleteMatchRequest]) (*connect.Response[v1.DeleteMatchResponse], error)
	// マッチングチェック（2人のユーザー間にマッチングが存在するか）
	CheckMatch(context.Context, *connect.Request[v1.CheckMatchRequest]) (*connect.Response[v1.CheckMatchResponse], error)
}

// NewMatchServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMatchServiceHandler(svc MatchServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	matchServiceMethods := v1.File_match_v1_match_proto.Services().ByName("MatchService").Methods()
	matchServiceCreateMatchHandler := connect.NewUnaryHandler(
		MatchServiceCreateMatchProcedure,
		svc.CreateMatch,
		connect.WithSchema(matchServiceMethods.ByName("CreateMatch")),
		connect.WithHandlerOptions(opts...),
	)
	matchServiceGetUserMatchesHandler := connect.NewUnaryHandler(
		MatchServiceGetUserMatchesProcedure,
		svc.GetUserMatches,
		connect.WithSchema(matchServiceMethods.ByName("GetUserMatches")),
		connect.WithHandlerOptions(opts...),
	)
	matchServiceDeleteMatchHandler := connect.NewUnaryHandler(
		MatchServiceDeleteMatchProcedure,
		svc.DeleteMatch,
		connect.WithSchema(matchServiceMethods.ByName("DeleteMatch")),
		connect.WithHandlerOptions(opts...),
	)
	matchServiceCheckMatchHandler := connect.NewUnaryHandler(
		MatchServiceCheckMatchProcedure,
		svc.CheckMatch,
		connect.WithSchema(matchServiceMethods.ByName("CheckMatch")),
		connect.WithHandlerOptions(opts...),
	)
	return "/match.v1.MatchService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MatchServiceCreateMatchProcedure:
			matchServiceCreateMatchHandler.ServeHTTP(w, r)
		case MatchServiceGetUserMatchesProcedure:
			matchServiceGetUserMatchesHandler.ServeHTTP(w, r)
		case MatchServiceDeleteMatchProcedure:
			matchServiceDeleteMatchHandler.ServeHTTP(w, r)
		case MatchServiceCheckMatchProcedure:
			matchServiceCheckMatchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMatchServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMatchServiceHandler struct{}

func (UnimplementedMatchServiceHandler) CreateMatch(context.Context, *connect.Request[v1.CreateMatchRequest]) (*connect.Response[v1.CreateMatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("match.v1.MatchService.CreateMatch is not implemented"))
}

func (UnimplementedMatchServiceHandler) GetUserMatches(context.Context, *connect.Request[v1.GetUserMatchesRequest]) (*connect.Response[v1.GetUserMatchesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("match.v1.MatchService.GetUserMatches is not implemented"))
}

func (UnimplementedMatchServiceHandler) DeleteMatch(context.Context, *connect.Request[v1.DeleteMatchRequest]) (*connect.Response[v1.DeleteMatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("match.v1.MatchService.DeleteMatch is not implemented"))
}

func (UnimplementedMatchServiceHandler) CheckMatch(context.Context, *connect.Request[v1.CheckMatchRequest]) (*connect.Response[v1.CheckMatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("match.v1.MatchService.CheckMatch is not implemented"))
}
