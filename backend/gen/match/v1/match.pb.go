// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: match/v1/match.proto

package matchv1

import (
	v1 "github.com/AI1411/m_app/gen/user/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// マッチング情報
type Match struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // マッチングID (UUID)
	UserId_1      string                 `protobuf:"bytes,2,opt,name=user_id_1,json=userId1,proto3" json:"user_id_1,omitempty"`     // 1人目のユーザーID
	UserId_2      string                 `protobuf:"bytes,3,opt,name=user_id_2,json=userId2,proto3" json:"user_id_2,omitempty"`     // 2人目のユーザーID
	MatchedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=matched_at,json=matchedAt,proto3" json:"matched_at,omitempty"` // マッチング成立日時
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 作成日時
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新日時
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Match) Reset() {
	*x = Match{}
	mi := &file_match_v1_match_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_match_v1_match_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_match_v1_match_proto_rawDescGZIP(), []int{0}
}

func (x *Match) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Match) GetUserId_1() string {
	if x != nil {
		return x.UserId_1
	}
	return ""
}

func (x *Match) GetUserId_2() string {
	if x != nil {
		return x.UserId_2
	}
	return ""
}

func (x *Match) GetMatchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MatchedAt
	}
	return nil
}

func (x *Match) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Match) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// マッチング作成リクエスト
type CreateMatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId_1      string                 `protobuf:"bytes,1,opt,name=user_id_1,json=userId1,proto3" json:"user_id_1,omitempty"` // 1人目のユーザーID
	UserId_2      string                 `protobuf:"bytes,2,opt,name=user_id_2,json=userId2,proto3" json:"user_id_2,omitempty"` // 2人目のユーザーID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMatchRequest) Reset() {
	*x = CreateMatchRequest{}
	mi := &file_match_v1_match_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchRequest) ProtoMessage() {}

func (x *CreateMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_v1_match_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchRequest.ProtoReflect.Descriptor instead.
func (*CreateMatchRequest) Descriptor() ([]byte, []int) {
	return file_match_v1_match_proto_rawDescGZIP(), []int{1}
}

func (x *CreateMatchRequest) GetUserId_1() string {
	if x != nil {
		return x.UserId_1
	}
	return ""
}

func (x *CreateMatchRequest) GetUserId_2() string {
	if x != nil {
		return x.UserId_2
	}
	return ""
}

// マッチング作成レスポンス
type CreateMatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // 作成されたマッチングのID
	MatchedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=matched_at,json=matchedAt,proto3" json:"matched_at,omitempty"` // マッチング成立日時
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMatchResponse) Reset() {
	*x = CreateMatchResponse{}
	mi := &file_match_v1_match_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchResponse) ProtoMessage() {}

func (x *CreateMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_v1_match_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchResponse.ProtoReflect.Descriptor instead.
func (*CreateMatchResponse) Descriptor() ([]byte, []int) {
	return file_match_v1_match_proto_rawDescGZIP(), []int{2}
}

func (x *CreateMatchResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateMatchResponse) GetMatchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MatchedAt
	}
	return nil
}

// マッチング取得リクエスト（ユーザーのマッチング一覧）
type GetUserMatchesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`        // マッチングを取得したいユーザーID
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // ページ番号
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 1ページあたりのアイテム数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserMatchesRequest) Reset() {
	*x = GetUserMatchesRequest{}
	mi := &file_match_v1_match_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMatchesRequest) ProtoMessage() {}

func (x *GetUserMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_v1_match_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMatchesRequest.ProtoReflect.Descriptor instead.
func (*GetUserMatchesRequest) Descriptor() ([]byte, []int) {
	return file_match_v1_match_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserMatchesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserMatchesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetUserMatchesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// マッチング取得レスポンス
type GetUserMatchesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Matches       []*MatchWithUser       `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`                          // マッチング情報とマッチしたユーザー情報のリスト
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 総マッチング数
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                               // 現在のページ番号
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`       // 1ページあたりのアイテム数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserMatchesResponse) Reset() {
	*x = GetUserMatchesResponse{}
	mi := &file_match_v1_match_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMatchesResponse) ProtoMessage() {}

func (x *GetUserMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_v1_match_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMatchesResponse.ProtoReflect.Descriptor instead.
func (*GetUserMatchesResponse) Descriptor() ([]byte, []int) {
	return file_match_v1_match_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserMatchesResponse) GetMatches() []*MatchWithUser {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *GetUserMatchesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetUserMatchesResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetUserMatchesResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// マッチング情報とマッチしたユーザー情報
type MatchWithUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         *Match                 `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`                                // マッチング情報
	MatchedUser   *v1.User               `protobuf:"bytes,2,opt,name=matched_user,json=matchedUser,proto3" json:"matched_user,omitempty"` // マッチしたユーザー情報
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchWithUser) Reset() {
	*x = MatchWithUser{}
	mi := &file_match_v1_match_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchWithUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchWithUser) ProtoMessage() {}

func (x *MatchWithUser) ProtoReflect() protoreflect.Message {
	mi := &file_match_v1_match_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchWithUser.ProtoReflect.Descriptor instead.
func (*MatchWithUser) Descriptor() ([]byte, []int) {
	return file_match_v1_match_proto_rawDescGZIP(), []int{5}
}

func (x *MatchWithUser) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *MatchWithUser) GetMatchedUser() *v1.User {
	if x != nil {
		return x.MatchedUser
	}
	return nil
}

// マッチング削除リクエスト
type DeleteMatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` // 削除するマッチングのID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMatchRequest) Reset() {
	*x = DeleteMatchRequest{}
	mi := &file_match_v1_match_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMatchRequest) ProtoMessage() {}

func (x *DeleteMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_v1_match_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMatchRequest.ProtoReflect.Descriptor instead.
func (*DeleteMatchRequest) Descriptor() ([]byte, []int) {
	return file_match_v1_match_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

// マッチング削除レスポンス
type DeleteMatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 削除成功フラグ
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMatchResponse) Reset() {
	*x = DeleteMatchResponse{}
	mi := &file_match_v1_match_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMatchResponse) ProtoMessage() {}

func (x *DeleteMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_v1_match_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMatchResponse.ProtoReflect.Descriptor instead.
func (*DeleteMatchResponse) Descriptor() ([]byte, []int) {
	return file_match_v1_match_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteMatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// マッチングチェックリクエスト（2人のユーザー間にマッチングが存在するか）
type CheckMatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId_1      string                 `protobuf:"bytes,1,opt,name=user_id_1,json=userId1,proto3" json:"user_id_1,omitempty"` // 1人目のユーザーID
	UserId_2      string                 `protobuf:"bytes,2,opt,name=user_id_2,json=userId2,proto3" json:"user_id_2,omitempty"` // 2人目のユーザーID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckMatchRequest) Reset() {
	*x = CheckMatchRequest{}
	mi := &file_match_v1_match_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMatchRequest) ProtoMessage() {}

func (x *CheckMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_v1_match_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMatchRequest.ProtoReflect.Descriptor instead.
func (*CheckMatchRequest) Descriptor() ([]byte, []int) {
	return file_match_v1_match_proto_rawDescGZIP(), []int{8}
}

func (x *CheckMatchRequest) GetUserId_1() string {
	if x != nil {
		return x.UserId_1
	}
	return ""
}

func (x *CheckMatchRequest) GetUserId_2() string {
	if x != nil {
		return x.UserId_2
	}
	return ""
}

// マッチングチェックレスポンス
type CheckMatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Matched       bool                   `protobuf:"varint,1,opt,name=matched,proto3" json:"matched,omitempty"`                           // マッチングが存在する場合はtrue
	MatchId       *string                `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3,oneof" json:"match_id,omitempty"`       // マッチングが存在する場合、そのID
	MatchedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=matched_at,json=matchedAt,proto3,oneof" json:"matched_at,omitempty"` // マッチング成立日時
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckMatchResponse) Reset() {
	*x = CheckMatchResponse{}
	mi := &file_match_v1_match_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMatchResponse) ProtoMessage() {}

func (x *CheckMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_v1_match_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMatchResponse.ProtoReflect.Descriptor instead.
func (*CheckMatchResponse) Descriptor() ([]byte, []int) {
	return file_match_v1_match_proto_rawDescGZIP(), []int{9}
}

func (x *CheckMatchResponse) GetMatched() bool {
	if x != nil {
		return x.Matched
	}
	return false
}

func (x *CheckMatchResponse) GetMatchId() string {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return ""
}

func (x *CheckMatchResponse) GetMatchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MatchedAt
	}
	return nil
}

var File_match_v1_match_proto protoreflect.FileDescriptor

const file_match_v1_match_proto_rawDesc = "" +
	"\n" +
	"\x14match/v1/match.proto\x12\bmatch.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x12user/v1/user.proto\"\x80\x02\n" +
	"\x05Match\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\tuser_id_1\x18\x02 \x01(\tR\auserId1\x12\x1a\n" +
	"\tuser_id_2\x18\x03 \x01(\tR\auserId2\x129\n" +
	"\n" +
	"matched_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tmatchedAt\x129\n" +
	"\n" +
	"created_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\"L\n" +
	"\x12CreateMatchRequest\x12\x1a\n" +
	"\tuser_id_1\x18\x01 \x01(\tR\auserId1\x12\x1a\n" +
	"\tuser_id_2\x18\x02 \x01(\tR\auserId2\"`\n" +
	"\x13CreateMatchResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x129\n" +
	"\n" +
	"matched_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tmatchedAt\"a\n" +
	"\x15GetUserMatchesRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\"\x9d\x01\n" +
	"\x16GetUserMatchesResponse\x121\n" +
	"\amatches\x18\x01 \x03(\v2\x17.match.v1.MatchWithUserR\amatches\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"h\n" +
	"\rMatchWithUser\x12%\n" +
	"\x05match\x18\x01 \x01(\v2\x0f.match.v1.MatchR\x05match\x120\n" +
	"\fmatched_user\x18\x02 \x01(\v2\r.user.v1.UserR\vmatchedUser\"/\n" +
	"\x12DeleteMatchRequest\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\tR\amatchId\"/\n" +
	"\x13DeleteMatchResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"K\n" +
	"\x11CheckMatchRequest\x12\x1a\n" +
	"\tuser_id_1\x18\x01 \x01(\tR\auserId1\x12\x1a\n" +
	"\tuser_id_2\x18\x02 \x01(\tR\auserId2\"\xaa\x01\n" +
	"\x12CheckMatchResponse\x12\x18\n" +
	"\amatched\x18\x01 \x01(\bR\amatched\x12\x1e\n" +
	"\bmatch_id\x18\x02 \x01(\tH\x00R\amatchId\x88\x01\x01\x12>\n" +
	"\n" +
	"matched_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampH\x01R\tmatchedAt\x88\x01\x01B\v\n" +
	"\t_match_idB\r\n" +
	"\v_matched_at2\xcc\x02\n" +
	"\fMatchService\x12L\n" +
	"\vCreateMatch\x12\x1c.match.v1.CreateMatchRequest\x1a\x1d.match.v1.CreateMatchResponse\"\x00\x12U\n" +
	"\x0eGetUserMatches\x12\x1f.match.v1.GetUserMatchesRequest\x1a .match.v1.GetUserMatchesResponse\"\x00\x12L\n" +
	"\vDeleteMatch\x12\x1c.match.v1.DeleteMatchRequest\x1a\x1d.match.v1.DeleteMatchResponse\"\x00\x12I\n" +
	"\n" +
	"CheckMatch\x12\x1b.match.v1.CheckMatchRequest\x1a\x1c.match.v1.CheckMatchResponse\"\x00B\x8b\x01\n" +
	"\fcom.match.v1B\n" +
	"MatchProtoP\x01Z,github.com/AI1411/m_app/gen/match/v1;matchv1\xa2\x02\x03MXX\xaa\x02\bMatch.V1\xca\x02\tMatch_\\V1\xe2\x02\x15Match_\\V1\\GPBMetadata\xea\x02\tMatch::V1b\x06proto3"

var (
	file_match_v1_match_proto_rawDescOnce sync.Once
	file_match_v1_match_proto_rawDescData []byte
)

func file_match_v1_match_proto_rawDescGZIP() []byte {
	file_match_v1_match_proto_rawDescOnce.Do(func() {
		file_match_v1_match_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_match_v1_match_proto_rawDesc), len(file_match_v1_match_proto_rawDesc)))
	})
	return file_match_v1_match_proto_rawDescData
}

var file_match_v1_match_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_match_v1_match_proto_goTypes = []any{
	(*Match)(nil),                  // 0: match.v1.Match
	(*CreateMatchRequest)(nil),     // 1: match.v1.CreateMatchRequest
	(*CreateMatchResponse)(nil),    // 2: match.v1.CreateMatchResponse
	(*GetUserMatchesRequest)(nil),  // 3: match.v1.GetUserMatchesRequest
	(*GetUserMatchesResponse)(nil), // 4: match.v1.GetUserMatchesResponse
	(*MatchWithUser)(nil),          // 5: match.v1.MatchWithUser
	(*DeleteMatchRequest)(nil),     // 6: match.v1.DeleteMatchRequest
	(*DeleteMatchResponse)(nil),    // 7: match.v1.DeleteMatchResponse
	(*CheckMatchRequest)(nil),      // 8: match.v1.CheckMatchRequest
	(*CheckMatchResponse)(nil),     // 9: match.v1.CheckMatchResponse
	(*timestamppb.Timestamp)(nil),  // 10: google.protobuf.Timestamp
	(*v1.User)(nil),                // 11: user.v1.User
}
var file_match_v1_match_proto_depIdxs = []int32{
	10, // 0: match.v1.Match.matched_at:type_name -> google.protobuf.Timestamp
	10, // 1: match.v1.Match.created_at:type_name -> google.protobuf.Timestamp
	10, // 2: match.v1.Match.updated_at:type_name -> google.protobuf.Timestamp
	10, // 3: match.v1.CreateMatchResponse.matched_at:type_name -> google.protobuf.Timestamp
	5,  // 4: match.v1.GetUserMatchesResponse.matches:type_name -> match.v1.MatchWithUser
	0,  // 5: match.v1.MatchWithUser.match:type_name -> match.v1.Match
	11, // 6: match.v1.MatchWithUser.matched_user:type_name -> user.v1.User
	10, // 7: match.v1.CheckMatchResponse.matched_at:type_name -> google.protobuf.Timestamp
	1,  // 8: match.v1.MatchService.CreateMatch:input_type -> match.v1.CreateMatchRequest
	3,  // 9: match.v1.MatchService.GetUserMatches:input_type -> match.v1.GetUserMatchesRequest
	6,  // 10: match.v1.MatchService.DeleteMatch:input_type -> match.v1.DeleteMatchRequest
	8,  // 11: match.v1.MatchService.CheckMatch:input_type -> match.v1.CheckMatchRequest
	2,  // 12: match.v1.MatchService.CreateMatch:output_type -> match.v1.CreateMatchResponse
	4,  // 13: match.v1.MatchService.GetUserMatches:output_type -> match.v1.GetUserMatchesResponse
	7,  // 14: match.v1.MatchService.DeleteMatch:output_type -> match.v1.DeleteMatchResponse
	9,  // 15: match.v1.MatchService.CheckMatch:output_type -> match.v1.CheckMatchResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_match_v1_match_proto_init() }
func file_match_v1_match_proto_init() {
	if File_match_v1_match_proto != nil {
		return
	}
	file_match_v1_match_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_match_v1_match_proto_rawDesc), len(file_match_v1_match_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_match_v1_match_proto_goTypes,
		DependencyIndexes: file_match_v1_match_proto_depIdxs,
		MessageInfos:      file_match_v1_match_proto_msgTypes,
	}.Build()
	File_match_v1_match_proto = out.File
	file_match_v1_match_proto_goTypes = nil
	file_match_v1_match_proto_depIdxs = nil
}
