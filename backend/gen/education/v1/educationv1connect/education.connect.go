// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: education/v1/education.proto

package educationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AI1411/m_app/gen/education/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EducationServiceName is the fully-qualified name of the EducationService service.
	EducationServiceName = "education.v1.EducationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EducationServiceListEducationsProcedure is the fully-qualified name of the EducationService's
	// ListEducations RPC.
	EducationServiceListEducationsProcedure = "/education.v1.EducationService/ListEducations"
)

// EducationServiceClient is a client for the education.v1.EducationService service.
type EducationServiceClient interface {
	// 学歴一覧取得
	ListEducations(context.Context, *connect.Request[v1.ListEducationsRequest]) (*connect.Response[v1.ListEducationsResponse], error)
}

// NewEducationServiceClient constructs a client for the education.v1.EducationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEducationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EducationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	educationServiceMethods := v1.File_education_v1_education_proto.Services().ByName("EducationService").Methods()
	return &educationServiceClient{
		listEducations: connect.NewClient[v1.ListEducationsRequest, v1.ListEducationsResponse](
			httpClient,
			baseURL+EducationServiceListEducationsProcedure,
			connect.WithSchema(educationServiceMethods.ByName("ListEducations")),
			connect.WithClientOptions(opts...),
		),
	}
}

// educationServiceClient implements EducationServiceClient.
type educationServiceClient struct {
	listEducations *connect.Client[v1.ListEducationsRequest, v1.ListEducationsResponse]
}

// ListEducations calls education.v1.EducationService.ListEducations.
func (c *educationServiceClient) ListEducations(ctx context.Context, req *connect.Request[v1.ListEducationsRequest]) (*connect.Response[v1.ListEducationsResponse], error) {
	return c.listEducations.CallUnary(ctx, req)
}

// EducationServiceHandler is an implementation of the education.v1.EducationService service.
type EducationServiceHandler interface {
	// 学歴一覧取得
	ListEducations(context.Context, *connect.Request[v1.ListEducationsRequest]) (*connect.Response[v1.ListEducationsResponse], error)
}

// NewEducationServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEducationServiceHandler(svc EducationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	educationServiceMethods := v1.File_education_v1_education_proto.Services().ByName("EducationService").Methods()
	educationServiceListEducationsHandler := connect.NewUnaryHandler(
		EducationServiceListEducationsProcedure,
		svc.ListEducations,
		connect.WithSchema(educationServiceMethods.ByName("ListEducations")),
		connect.WithHandlerOptions(opts...),
	)
	return "/education.v1.EducationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EducationServiceListEducationsProcedure:
			educationServiceListEducationsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEducationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEducationServiceHandler struct{}

func (UnimplementedEducationServiceHandler) ListEducations(context.Context, *connect.Request[v1.ListEducationsRequest]) (*connect.Response[v1.ListEducationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("education.v1.EducationService.ListEducations is not implemented"))
}
