// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: prefecture/v1/prefecture.proto

package prefecturev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AI1411/m_app/gen/prefecture/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PrefectureServiceName is the fully-qualified name of the PrefectureService service.
	PrefectureServiceName = "prefecture.v1.PrefectureService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PrefectureServiceListPrefecturesProcedure is the fully-qualified name of the PrefectureService's
	// ListPrefectures RPC.
	PrefectureServiceListPrefecturesProcedure = "/prefecture.v1.PrefectureService/ListPrefectures"
)

// PrefectureServiceClient is a client for the prefecture.v1.PrefectureService service.
type PrefectureServiceClient interface {
	// 都道府県一覧取得
	ListPrefectures(context.Context, *connect.Request[v1.ListPrefecturesRequest]) (*connect.Response[v1.ListPrefecturesResponse], error)
}

// NewPrefectureServiceClient constructs a client for the prefecture.v1.PrefectureService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPrefectureServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PrefectureServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	prefectureServiceMethods := v1.File_prefecture_v1_prefecture_proto.Services().ByName("PrefectureService").Methods()
	return &prefectureServiceClient{
		listPrefectures: connect.NewClient[v1.ListPrefecturesRequest, v1.ListPrefecturesResponse](
			httpClient,
			baseURL+PrefectureServiceListPrefecturesProcedure,
			connect.WithSchema(prefectureServiceMethods.ByName("ListPrefectures")),
			connect.WithClientOptions(opts...),
		),
	}
}

// prefectureServiceClient implements PrefectureServiceClient.
type prefectureServiceClient struct {
	listPrefectures *connect.Client[v1.ListPrefecturesRequest, v1.ListPrefecturesResponse]
}

// ListPrefectures calls prefecture.v1.PrefectureService.ListPrefectures.
func (c *prefectureServiceClient) ListPrefectures(ctx context.Context, req *connect.Request[v1.ListPrefecturesRequest]) (*connect.Response[v1.ListPrefecturesResponse], error) {
	return c.listPrefectures.CallUnary(ctx, req)
}

// PrefectureServiceHandler is an implementation of the prefecture.v1.PrefectureService service.
type PrefectureServiceHandler interface {
	// 都道府県一覧取得
	ListPrefectures(context.Context, *connect.Request[v1.ListPrefecturesRequest]) (*connect.Response[v1.ListPrefecturesResponse], error)
}

// NewPrefectureServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPrefectureServiceHandler(svc PrefectureServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	prefectureServiceMethods := v1.File_prefecture_v1_prefecture_proto.Services().ByName("PrefectureService").Methods()
	prefectureServiceListPrefecturesHandler := connect.NewUnaryHandler(
		PrefectureServiceListPrefecturesProcedure,
		svc.ListPrefectures,
		connect.WithSchema(prefectureServiceMethods.ByName("ListPrefectures")),
		connect.WithHandlerOptions(opts...),
	)
	return "/prefecture.v1.PrefectureService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PrefectureServiceListPrefecturesProcedure:
			prefectureServiceListPrefecturesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPrefectureServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPrefectureServiceHandler struct{}

func (UnimplementedPrefectureServiceHandler) ListPrefectures(context.Context, *connect.Request[v1.ListPrefecturesRequest]) (*connect.Response[v1.ListPrefecturesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("prefecture.v1.PrefectureService.ListPrefectures is not implemented"))
}
