// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: footprint/v1/footprint.proto

package footprintv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AI1411/m_app/gen/footprint/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FootprintServiceName is the fully-qualified name of the FootprintService service.
	FootprintServiceName = "footprint.v1.FootprintService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FootprintServiceRecordFootprintProcedure is the fully-qualified name of the FootprintService's
	// RecordFootprint RPC.
	FootprintServiceRecordFootprintProcedure = "/footprint.v1.FootprintService/RecordFootprint"
	// FootprintServiceGetVisitorsProcedure is the fully-qualified name of the FootprintService's
	// GetVisitors RPC.
	FootprintServiceGetVisitorsProcedure = "/footprint.v1.FootprintService/GetVisitors"
	// FootprintServiceGetVisitedUsersProcedure is the fully-qualified name of the FootprintService's
	// GetVisitedUsers RPC.
	FootprintServiceGetVisitedUsersProcedure = "/footprint.v1.FootprintService/GetVisitedUsers"
)

// FootprintServiceClient is a client for the footprint.v1.FootprintService service.
type FootprintServiceClient interface {
	// ユーザーの足あとを記録する（プロフィール閲覧時に呼び出される）
	RecordFootprint(context.Context, *connect.Request[v1.RecordFootprintRequest]) (*connect.Response[v1.RecordFootprintResponse], error)
	// 自分のプロフィールを閲覧したユーザー一覧を取得する
	GetVisitors(context.Context, *connect.Request[v1.GetVisitorsRequest]) (*connect.Response[v1.GetVisitorsResponse], error)
	// 自分が閲覧したユーザー一覧を取得する
	GetVisitedUsers(context.Context, *connect.Request[v1.GetVisitedUsersRequest]) (*connect.Response[v1.GetVisitedUsersResponse], error)
}

// NewFootprintServiceClient constructs a client for the footprint.v1.FootprintService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFootprintServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FootprintServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	footprintServiceMethods := v1.File_footprint_v1_footprint_proto.Services().ByName("FootprintService").Methods()
	return &footprintServiceClient{
		recordFootprint: connect.NewClient[v1.RecordFootprintRequest, v1.RecordFootprintResponse](
			httpClient,
			baseURL+FootprintServiceRecordFootprintProcedure,
			connect.WithSchema(footprintServiceMethods.ByName("RecordFootprint")),
			connect.WithClientOptions(opts...),
		),
		getVisitors: connect.NewClient[v1.GetVisitorsRequest, v1.GetVisitorsResponse](
			httpClient,
			baseURL+FootprintServiceGetVisitorsProcedure,
			connect.WithSchema(footprintServiceMethods.ByName("GetVisitors")),
			connect.WithClientOptions(opts...),
		),
		getVisitedUsers: connect.NewClient[v1.GetVisitedUsersRequest, v1.GetVisitedUsersResponse](
			httpClient,
			baseURL+FootprintServiceGetVisitedUsersProcedure,
			connect.WithSchema(footprintServiceMethods.ByName("GetVisitedUsers")),
			connect.WithClientOptions(opts...),
		),
	}
}

// footprintServiceClient implements FootprintServiceClient.
type footprintServiceClient struct {
	recordFootprint *connect.Client[v1.RecordFootprintRequest, v1.RecordFootprintResponse]
	getVisitors     *connect.Client[v1.GetVisitorsRequest, v1.GetVisitorsResponse]
	getVisitedUsers *connect.Client[v1.GetVisitedUsersRequest, v1.GetVisitedUsersResponse]
}

// RecordFootprint calls footprint.v1.FootprintService.RecordFootprint.
func (c *footprintServiceClient) RecordFootprint(ctx context.Context, req *connect.Request[v1.RecordFootprintRequest]) (*connect.Response[v1.RecordFootprintResponse], error) {
	return c.recordFootprint.CallUnary(ctx, req)
}

// GetVisitors calls footprint.v1.FootprintService.GetVisitors.
func (c *footprintServiceClient) GetVisitors(ctx context.Context, req *connect.Request[v1.GetVisitorsRequest]) (*connect.Response[v1.GetVisitorsResponse], error) {
	return c.getVisitors.CallUnary(ctx, req)
}

// GetVisitedUsers calls footprint.v1.FootprintService.GetVisitedUsers.
func (c *footprintServiceClient) GetVisitedUsers(ctx context.Context, req *connect.Request[v1.GetVisitedUsersRequest]) (*connect.Response[v1.GetVisitedUsersResponse], error) {
	return c.getVisitedUsers.CallUnary(ctx, req)
}

// FootprintServiceHandler is an implementation of the footprint.v1.FootprintService service.
type FootprintServiceHandler interface {
	// ユーザーの足あとを記録する（プロフィール閲覧時に呼び出される）
	RecordFootprint(context.Context, *connect.Request[v1.RecordFootprintRequest]) (*connect.Response[v1.RecordFootprintResponse], error)
	// 自分のプロフィールを閲覧したユーザー一覧を取得する
	GetVisitors(context.Context, *connect.Request[v1.GetVisitorsRequest]) (*connect.Response[v1.GetVisitorsResponse], error)
	// 自分が閲覧したユーザー一覧を取得する
	GetVisitedUsers(context.Context, *connect.Request[v1.GetVisitedUsersRequest]) (*connect.Response[v1.GetVisitedUsersResponse], error)
}

// NewFootprintServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFootprintServiceHandler(svc FootprintServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	footprintServiceMethods := v1.File_footprint_v1_footprint_proto.Services().ByName("FootprintService").Methods()
	footprintServiceRecordFootprintHandler := connect.NewUnaryHandler(
		FootprintServiceRecordFootprintProcedure,
		svc.RecordFootprint,
		connect.WithSchema(footprintServiceMethods.ByName("RecordFootprint")),
		connect.WithHandlerOptions(opts...),
	)
	footprintServiceGetVisitorsHandler := connect.NewUnaryHandler(
		FootprintServiceGetVisitorsProcedure,
		svc.GetVisitors,
		connect.WithSchema(footprintServiceMethods.ByName("GetVisitors")),
		connect.WithHandlerOptions(opts...),
	)
	footprintServiceGetVisitedUsersHandler := connect.NewUnaryHandler(
		FootprintServiceGetVisitedUsersProcedure,
		svc.GetVisitedUsers,
		connect.WithSchema(footprintServiceMethods.ByName("GetVisitedUsers")),
		connect.WithHandlerOptions(opts...),
	)
	return "/footprint.v1.FootprintService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FootprintServiceRecordFootprintProcedure:
			footprintServiceRecordFootprintHandler.ServeHTTP(w, r)
		case FootprintServiceGetVisitorsProcedure:
			footprintServiceGetVisitorsHandler.ServeHTTP(w, r)
		case FootprintServiceGetVisitedUsersProcedure:
			footprintServiceGetVisitedUsersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFootprintServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFootprintServiceHandler struct{}

func (UnimplementedFootprintServiceHandler) RecordFootprint(context.Context, *connect.Request[v1.RecordFootprintRequest]) (*connect.Response[v1.RecordFootprintResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("footprint.v1.FootprintService.RecordFootprint is not implemented"))
}

func (UnimplementedFootprintServiceHandler) GetVisitors(context.Context, *connect.Request[v1.GetVisitorsRequest]) (*connect.Response[v1.GetVisitorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("footprint.v1.FootprintService.GetVisitors is not implemented"))
}

func (UnimplementedFootprintServiceHandler) GetVisitedUsers(context.Context, *connect.Request[v1.GetVisitedUsersRequest]) (*connect.Response[v1.GetVisitedUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("footprint.v1.FootprintService.GetVisitedUsers is not implemented"))
}
