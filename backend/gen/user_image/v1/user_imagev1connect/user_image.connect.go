// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user_image/v1/user_image.proto

package user_imagev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AI1411/m_app/gen/user_image/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserImageServiceName is the fully-qualified name of the UserImageService service.
	UserImageServiceName = "user_image.v1.UserImageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserImageServiceCreateUserImageProcedure is the fully-qualified name of the UserImageService's
	// CreateUserImage RPC.
	UserImageServiceCreateUserImageProcedure = "/user_image.v1.UserImageService/CreateUserImage"
	// UserImageServiceGetUserImageProcedure is the fully-qualified name of the UserImageService's
	// GetUserImage RPC.
	UserImageServiceGetUserImageProcedure = "/user_image.v1.UserImageService/GetUserImage"
	// UserImageServiceListUserImagesProcedure is the fully-qualified name of the UserImageService's
	// ListUserImages RPC.
	UserImageServiceListUserImagesProcedure = "/user_image.v1.UserImageService/ListUserImages"
	// UserImageServiceUpdateUserImageProcedure is the fully-qualified name of the UserImageService's
	// UpdateUserImage RPC.
	UserImageServiceUpdateUserImageProcedure = "/user_image.v1.UserImageService/UpdateUserImage"
	// UserImageServiceDeleteUserImageProcedure is the fully-qualified name of the UserImageService's
	// DeleteUserImage RPC.
	UserImageServiceDeleteUserImageProcedure = "/user_image.v1.UserImageService/DeleteUserImage"
)

// UserImageServiceClient is a client for the user_image.v1.UserImageService service.
type UserImageServiceClient interface {
	// ユーザー画像作成
	CreateUserImage(context.Context, *connect.Request[v1.CreateUserImageRequest]) (*connect.Response[v1.CreateUserImageResponse], error)
	// ユーザー画像取得
	GetUserImage(context.Context, *connect.Request[v1.GetUserImageRequest]) (*connect.Response[v1.GetUserImageResponse], error)
	// ユーザー画像一覧取得
	ListUserImages(context.Context, *connect.Request[v1.ListUserImagesRequest]) (*connect.Response[v1.ListUserImagesResponse], error)
	// ユーザー画像更新
	UpdateUserImage(context.Context, *connect.Request[v1.UpdateUserImageRequest]) (*connect.Response[v1.UpdateUserImageResponse], error)
	// ユーザー画像削除
	DeleteUserImage(context.Context, *connect.Request[v1.DeleteUserImageRequest]) (*connect.Response[v1.DeleteUserImageResponse], error)
}

// NewUserImageServiceClient constructs a client for the user_image.v1.UserImageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserImageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserImageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userImageServiceMethods := v1.File_user_image_v1_user_image_proto.Services().ByName("UserImageService").Methods()
	return &userImageServiceClient{
		createUserImage: connect.NewClient[v1.CreateUserImageRequest, v1.CreateUserImageResponse](
			httpClient,
			baseURL+UserImageServiceCreateUserImageProcedure,
			connect.WithSchema(userImageServiceMethods.ByName("CreateUserImage")),
			connect.WithClientOptions(opts...),
		),
		getUserImage: connect.NewClient[v1.GetUserImageRequest, v1.GetUserImageResponse](
			httpClient,
			baseURL+UserImageServiceGetUserImageProcedure,
			connect.WithSchema(userImageServiceMethods.ByName("GetUserImage")),
			connect.WithClientOptions(opts...),
		),
		listUserImages: connect.NewClient[v1.ListUserImagesRequest, v1.ListUserImagesResponse](
			httpClient,
			baseURL+UserImageServiceListUserImagesProcedure,
			connect.WithSchema(userImageServiceMethods.ByName("ListUserImages")),
			connect.WithClientOptions(opts...),
		),
		updateUserImage: connect.NewClient[v1.UpdateUserImageRequest, v1.UpdateUserImageResponse](
			httpClient,
			baseURL+UserImageServiceUpdateUserImageProcedure,
			connect.WithSchema(userImageServiceMethods.ByName("UpdateUserImage")),
			connect.WithClientOptions(opts...),
		),
		deleteUserImage: connect.NewClient[v1.DeleteUserImageRequest, v1.DeleteUserImageResponse](
			httpClient,
			baseURL+UserImageServiceDeleteUserImageProcedure,
			connect.WithSchema(userImageServiceMethods.ByName("DeleteUserImage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userImageServiceClient implements UserImageServiceClient.
type userImageServiceClient struct {
	createUserImage *connect.Client[v1.CreateUserImageRequest, v1.CreateUserImageResponse]
	getUserImage    *connect.Client[v1.GetUserImageRequest, v1.GetUserImageResponse]
	listUserImages  *connect.Client[v1.ListUserImagesRequest, v1.ListUserImagesResponse]
	updateUserImage *connect.Client[v1.UpdateUserImageRequest, v1.UpdateUserImageResponse]
	deleteUserImage *connect.Client[v1.DeleteUserImageRequest, v1.DeleteUserImageResponse]
}

// CreateUserImage calls user_image.v1.UserImageService.CreateUserImage.
func (c *userImageServiceClient) CreateUserImage(ctx context.Context, req *connect.Request[v1.CreateUserImageRequest]) (*connect.Response[v1.CreateUserImageResponse], error) {
	return c.createUserImage.CallUnary(ctx, req)
}

// GetUserImage calls user_image.v1.UserImageService.GetUserImage.
func (c *userImageServiceClient) GetUserImage(ctx context.Context, req *connect.Request[v1.GetUserImageRequest]) (*connect.Response[v1.GetUserImageResponse], error) {
	return c.getUserImage.CallUnary(ctx, req)
}

// ListUserImages calls user_image.v1.UserImageService.ListUserImages.
func (c *userImageServiceClient) ListUserImages(ctx context.Context, req *connect.Request[v1.ListUserImagesRequest]) (*connect.Response[v1.ListUserImagesResponse], error) {
	return c.listUserImages.CallUnary(ctx, req)
}

// UpdateUserImage calls user_image.v1.UserImageService.UpdateUserImage.
func (c *userImageServiceClient) UpdateUserImage(ctx context.Context, req *connect.Request[v1.UpdateUserImageRequest]) (*connect.Response[v1.UpdateUserImageResponse], error) {
	return c.updateUserImage.CallUnary(ctx, req)
}

// DeleteUserImage calls user_image.v1.UserImageService.DeleteUserImage.
func (c *userImageServiceClient) DeleteUserImage(ctx context.Context, req *connect.Request[v1.DeleteUserImageRequest]) (*connect.Response[v1.DeleteUserImageResponse], error) {
	return c.deleteUserImage.CallUnary(ctx, req)
}

// UserImageServiceHandler is an implementation of the user_image.v1.UserImageService service.
type UserImageServiceHandler interface {
	// ユーザー画像作成
	CreateUserImage(context.Context, *connect.Request[v1.CreateUserImageRequest]) (*connect.Response[v1.CreateUserImageResponse], error)
	// ユーザー画像取得
	GetUserImage(context.Context, *connect.Request[v1.GetUserImageRequest]) (*connect.Response[v1.GetUserImageResponse], error)
	// ユーザー画像一覧取得
	ListUserImages(context.Context, *connect.Request[v1.ListUserImagesRequest]) (*connect.Response[v1.ListUserImagesResponse], error)
	// ユーザー画像更新
	UpdateUserImage(context.Context, *connect.Request[v1.UpdateUserImageRequest]) (*connect.Response[v1.UpdateUserImageResponse], error)
	// ユーザー画像削除
	DeleteUserImage(context.Context, *connect.Request[v1.DeleteUserImageRequest]) (*connect.Response[v1.DeleteUserImageResponse], error)
}

// NewUserImageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserImageServiceHandler(svc UserImageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userImageServiceMethods := v1.File_user_image_v1_user_image_proto.Services().ByName("UserImageService").Methods()
	userImageServiceCreateUserImageHandler := connect.NewUnaryHandler(
		UserImageServiceCreateUserImageProcedure,
		svc.CreateUserImage,
		connect.WithSchema(userImageServiceMethods.ByName("CreateUserImage")),
		connect.WithHandlerOptions(opts...),
	)
	userImageServiceGetUserImageHandler := connect.NewUnaryHandler(
		UserImageServiceGetUserImageProcedure,
		svc.GetUserImage,
		connect.WithSchema(userImageServiceMethods.ByName("GetUserImage")),
		connect.WithHandlerOptions(opts...),
	)
	userImageServiceListUserImagesHandler := connect.NewUnaryHandler(
		UserImageServiceListUserImagesProcedure,
		svc.ListUserImages,
		connect.WithSchema(userImageServiceMethods.ByName("ListUserImages")),
		connect.WithHandlerOptions(opts...),
	)
	userImageServiceUpdateUserImageHandler := connect.NewUnaryHandler(
		UserImageServiceUpdateUserImageProcedure,
		svc.UpdateUserImage,
		connect.WithSchema(userImageServiceMethods.ByName("UpdateUserImage")),
		connect.WithHandlerOptions(opts...),
	)
	userImageServiceDeleteUserImageHandler := connect.NewUnaryHandler(
		UserImageServiceDeleteUserImageProcedure,
		svc.DeleteUserImage,
		connect.WithSchema(userImageServiceMethods.ByName("DeleteUserImage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user_image.v1.UserImageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserImageServiceCreateUserImageProcedure:
			userImageServiceCreateUserImageHandler.ServeHTTP(w, r)
		case UserImageServiceGetUserImageProcedure:
			userImageServiceGetUserImageHandler.ServeHTTP(w, r)
		case UserImageServiceListUserImagesProcedure:
			userImageServiceListUserImagesHandler.ServeHTTP(w, r)
		case UserImageServiceUpdateUserImageProcedure:
			userImageServiceUpdateUserImageHandler.ServeHTTP(w, r)
		case UserImageServiceDeleteUserImageProcedure:
			userImageServiceDeleteUserImageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserImageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserImageServiceHandler struct{}

func (UnimplementedUserImageServiceHandler) CreateUserImage(context.Context, *connect.Request[v1.CreateUserImageRequest]) (*connect.Response[v1.CreateUserImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_image.v1.UserImageService.CreateUserImage is not implemented"))
}

func (UnimplementedUserImageServiceHandler) GetUserImage(context.Context, *connect.Request[v1.GetUserImageRequest]) (*connect.Response[v1.GetUserImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_image.v1.UserImageService.GetUserImage is not implemented"))
}

func (UnimplementedUserImageServiceHandler) ListUserImages(context.Context, *connect.Request[v1.ListUserImagesRequest]) (*connect.Response[v1.ListUserImagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_image.v1.UserImageService.ListUserImages is not implemented"))
}

func (UnimplementedUserImageServiceHandler) UpdateUserImage(context.Context, *connect.Request[v1.UpdateUserImageRequest]) (*connect.Response[v1.UpdateUserImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_image.v1.UserImageService.UpdateUserImage is not implemented"))
}

func (UnimplementedUserImageServiceHandler) DeleteUserImage(context.Context, *connect.Request[v1.DeleteUserImageRequest]) (*connect.Response[v1.DeleteUserImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_image.v1.UserImageService.DeleteUserImage is not implemented"))
}
