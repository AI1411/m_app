// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: like/v1/like.proto

package likev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AI1411/m_app/gen/like/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LikeServiceName is the fully-qualified name of the LikeService service.
	LikeServiceName = "like.v1.LikeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LikeServiceCreateLikeProcedure is the fully-qualified name of the LikeService's CreateLike RPC.
	LikeServiceCreateLikeProcedure = "/like.v1.LikeService/CreateLike"
	// LikeServiceDeleteLikeProcedure is the fully-qualified name of the LikeService's DeleteLike RPC.
	LikeServiceDeleteLikeProcedure = "/like.v1.LikeService/DeleteLike"
	// LikeServiceGetLikesForTargetProcedure is the fully-qualified name of the LikeService's
	// GetLikesForTarget RPC.
	LikeServiceGetLikesForTargetProcedure = "/like.v1.LikeService/GetLikesForTarget"
	// LikeServiceGetUserLikesProcedure is the fully-qualified name of the LikeService's GetUserLikes
	// RPC.
	LikeServiceGetUserLikesProcedure = "/like.v1.LikeService/GetUserLikes"
	// LikeServiceCheckLikeProcedure is the fully-qualified name of the LikeService's CheckLike RPC.
	LikeServiceCheckLikeProcedure = "/like.v1.LikeService/CheckLike"
)

// LikeServiceClient is a client for the like.v1.LikeService service.
type LikeServiceClient interface {
	// いいね作成
	CreateLike(context.Context, *connect.Request[v1.CreateLikeRequest]) (*connect.Response[v1.CreateLikeResponse], error)
	// いいね削除
	DeleteLike(context.Context, *connect.Request[v1.DeleteLikeRequest]) (*connect.Response[v1.DeleteLikeResponse], error)
	// 特定のターゲットに対するいいね一覧取得
	GetLikesForTarget(context.Context, *connect.Request[v1.GetLikesForTargetRequest]) (*connect.Response[v1.GetLikesForTargetResponse], error)
	// ユーザーのいいね一覧取得
	GetUserLikes(context.Context, *connect.Request[v1.GetUserLikesRequest]) (*connect.Response[v1.GetUserLikesResponse], error)
	// いいねチェック（ユーザーが特定のターゲットにいいねしているか）
	CheckLike(context.Context, *connect.Request[v1.CheckLikeRequest]) (*connect.Response[v1.CheckLikeResponse], error)
}

// NewLikeServiceClient constructs a client for the like.v1.LikeService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLikeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LikeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	likeServiceMethods := v1.File_like_v1_like_proto.Services().ByName("LikeService").Methods()
	return &likeServiceClient{
		createLike: connect.NewClient[v1.CreateLikeRequest, v1.CreateLikeResponse](
			httpClient,
			baseURL+LikeServiceCreateLikeProcedure,
			connect.WithSchema(likeServiceMethods.ByName("CreateLike")),
			connect.WithClientOptions(opts...),
		),
		deleteLike: connect.NewClient[v1.DeleteLikeRequest, v1.DeleteLikeResponse](
			httpClient,
			baseURL+LikeServiceDeleteLikeProcedure,
			connect.WithSchema(likeServiceMethods.ByName("DeleteLike")),
			connect.WithClientOptions(opts...),
		),
		getLikesForTarget: connect.NewClient[v1.GetLikesForTargetRequest, v1.GetLikesForTargetResponse](
			httpClient,
			baseURL+LikeServiceGetLikesForTargetProcedure,
			connect.WithSchema(likeServiceMethods.ByName("GetLikesForTarget")),
			connect.WithClientOptions(opts...),
		),
		getUserLikes: connect.NewClient[v1.GetUserLikesRequest, v1.GetUserLikesResponse](
			httpClient,
			baseURL+LikeServiceGetUserLikesProcedure,
			connect.WithSchema(likeServiceMethods.ByName("GetUserLikes")),
			connect.WithClientOptions(opts...),
		),
		checkLike: connect.NewClient[v1.CheckLikeRequest, v1.CheckLikeResponse](
			httpClient,
			baseURL+LikeServiceCheckLikeProcedure,
			connect.WithSchema(likeServiceMethods.ByName("CheckLike")),
			connect.WithClientOptions(opts...),
		),
	}
}

// likeServiceClient implements LikeServiceClient.
type likeServiceClient struct {
	createLike        *connect.Client[v1.CreateLikeRequest, v1.CreateLikeResponse]
	deleteLike        *connect.Client[v1.DeleteLikeRequest, v1.DeleteLikeResponse]
	getLikesForTarget *connect.Client[v1.GetLikesForTargetRequest, v1.GetLikesForTargetResponse]
	getUserLikes      *connect.Client[v1.GetUserLikesRequest, v1.GetUserLikesResponse]
	checkLike         *connect.Client[v1.CheckLikeRequest, v1.CheckLikeResponse]
}

// CreateLike calls like.v1.LikeService.CreateLike.
func (c *likeServiceClient) CreateLike(ctx context.Context, req *connect.Request[v1.CreateLikeRequest]) (*connect.Response[v1.CreateLikeResponse], error) {
	return c.createLike.CallUnary(ctx, req)
}

// DeleteLike calls like.v1.LikeService.DeleteLike.
func (c *likeServiceClient) DeleteLike(ctx context.Context, req *connect.Request[v1.DeleteLikeRequest]) (*connect.Response[v1.DeleteLikeResponse], error) {
	return c.deleteLike.CallUnary(ctx, req)
}

// GetLikesForTarget calls like.v1.LikeService.GetLikesForTarget.
func (c *likeServiceClient) GetLikesForTarget(ctx context.Context, req *connect.Request[v1.GetLikesForTargetRequest]) (*connect.Response[v1.GetLikesForTargetResponse], error) {
	return c.getLikesForTarget.CallUnary(ctx, req)
}

// GetUserLikes calls like.v1.LikeService.GetUserLikes.
func (c *likeServiceClient) GetUserLikes(ctx context.Context, req *connect.Request[v1.GetUserLikesRequest]) (*connect.Response[v1.GetUserLikesResponse], error) {
	return c.getUserLikes.CallUnary(ctx, req)
}

// CheckLike calls like.v1.LikeService.CheckLike.
func (c *likeServiceClient) CheckLike(ctx context.Context, req *connect.Request[v1.CheckLikeRequest]) (*connect.Response[v1.CheckLikeResponse], error) {
	return c.checkLike.CallUnary(ctx, req)
}

// LikeServiceHandler is an implementation of the like.v1.LikeService service.
type LikeServiceHandler interface {
	// いいね作成
	CreateLike(context.Context, *connect.Request[v1.CreateLikeRequest]) (*connect.Response[v1.CreateLikeResponse], error)
	// いいね削除
	DeleteLike(context.Context, *connect.Request[v1.DeleteLikeRequest]) (*connect.Response[v1.DeleteLikeResponse], error)
	// 特定のターゲットに対するいいね一覧取得
	GetLikesForTarget(context.Context, *connect.Request[v1.GetLikesForTargetRequest]) (*connect.Response[v1.GetLikesForTargetResponse], error)
	// ユーザーのいいね一覧取得
	GetUserLikes(context.Context, *connect.Request[v1.GetUserLikesRequest]) (*connect.Response[v1.GetUserLikesResponse], error)
	// いいねチェック（ユーザーが特定のターゲットにいいねしているか）
	CheckLike(context.Context, *connect.Request[v1.CheckLikeRequest]) (*connect.Response[v1.CheckLikeResponse], error)
}

// NewLikeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLikeServiceHandler(svc LikeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	likeServiceMethods := v1.File_like_v1_like_proto.Services().ByName("LikeService").Methods()
	likeServiceCreateLikeHandler := connect.NewUnaryHandler(
		LikeServiceCreateLikeProcedure,
		svc.CreateLike,
		connect.WithSchema(likeServiceMethods.ByName("CreateLike")),
		connect.WithHandlerOptions(opts...),
	)
	likeServiceDeleteLikeHandler := connect.NewUnaryHandler(
		LikeServiceDeleteLikeProcedure,
		svc.DeleteLike,
		connect.WithSchema(likeServiceMethods.ByName("DeleteLike")),
		connect.WithHandlerOptions(opts...),
	)
	likeServiceGetLikesForTargetHandler := connect.NewUnaryHandler(
		LikeServiceGetLikesForTargetProcedure,
		svc.GetLikesForTarget,
		connect.WithSchema(likeServiceMethods.ByName("GetLikesForTarget")),
		connect.WithHandlerOptions(opts...),
	)
	likeServiceGetUserLikesHandler := connect.NewUnaryHandler(
		LikeServiceGetUserLikesProcedure,
		svc.GetUserLikes,
		connect.WithSchema(likeServiceMethods.ByName("GetUserLikes")),
		connect.WithHandlerOptions(opts...),
	)
	likeServiceCheckLikeHandler := connect.NewUnaryHandler(
		LikeServiceCheckLikeProcedure,
		svc.CheckLike,
		connect.WithSchema(likeServiceMethods.ByName("CheckLike")),
		connect.WithHandlerOptions(opts...),
	)
	return "/like.v1.LikeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LikeServiceCreateLikeProcedure:
			likeServiceCreateLikeHandler.ServeHTTP(w, r)
		case LikeServiceDeleteLikeProcedure:
			likeServiceDeleteLikeHandler.ServeHTTP(w, r)
		case LikeServiceGetLikesForTargetProcedure:
			likeServiceGetLikesForTargetHandler.ServeHTTP(w, r)
		case LikeServiceGetUserLikesProcedure:
			likeServiceGetUserLikesHandler.ServeHTTP(w, r)
		case LikeServiceCheckLikeProcedure:
			likeServiceCheckLikeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLikeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLikeServiceHandler struct{}

func (UnimplementedLikeServiceHandler) CreateLike(context.Context, *connect.Request[v1.CreateLikeRequest]) (*connect.Response[v1.CreateLikeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("like.v1.LikeService.CreateLike is not implemented"))
}

func (UnimplementedLikeServiceHandler) DeleteLike(context.Context, *connect.Request[v1.DeleteLikeRequest]) (*connect.Response[v1.DeleteLikeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("like.v1.LikeService.DeleteLike is not implemented"))
}

func (UnimplementedLikeServiceHandler) GetLikesForTarget(context.Context, *connect.Request[v1.GetLikesForTargetRequest]) (*connect.Response[v1.GetLikesForTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("like.v1.LikeService.GetLikesForTarget is not implemented"))
}

func (UnimplementedLikeServiceHandler) GetUserLikes(context.Context, *connect.Request[v1.GetUserLikesRequest]) (*connect.Response[v1.GetUserLikesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("like.v1.LikeService.GetUserLikes is not implemented"))
}

func (UnimplementedLikeServiceHandler) CheckLike(context.Context, *connect.Request[v1.CheckLikeRequest]) (*connect.Response[v1.CheckLikeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("like.v1.LikeService.CheckLike is not implemented"))
}
